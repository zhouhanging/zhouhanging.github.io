<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HEllo</title>
  
  <subtitle>It is never too late to learn</subtitle>
  <link href="https://zhouhanging.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhouhanging.github.io/"/>
  <updated>2021-05-23T11:53:10.546Z</updated>
  <id>https://zhouhanging.github.io/</id>
  
  <author>
    <name>hello</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html知识点总结✌️✌️</title>
    <link href="https://zhouhanging.github.io/2021/05/23/HTML/"/>
    <id>https://zhouhanging.github.io/2021/05/23/HTML/</id>
    <published>2021-05-23T07:22:08.770Z</published>
    <updated>2021-05-23T11:53:10.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html知识点总结✌️✌️"><a href="#html知识点总结✌️✌️" class="headerlink" title="html知识点总结✌️✌️"></a>html知识点总结✌️✌️</h3><h3 id="1-前端需要注意哪些SEO"><a href="#1-前端需要注意哪些SEO" class="headerlink" title="#1 前端需要注意哪些SEO"></a><a href="http://interview.poetries.top/docs/base.html#_1-%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9Bseo">#</a>1 前端需要注意哪些SEO</h3><ul><li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，<code>title</code>值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li><li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用<code>js</code>输出：爬虫不会执行js获取内容</li><li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li><li>非装饰性图片必须加<code>alt</code></li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h3 id="2-lt-img-gt-的title和alt有什么区别"><a href="#2-lt-img-gt-的title和alt有什么区别" class="headerlink" title="#2 &lt;img&gt;的title和alt有什么区别"></a><a href="http://interview.poetries.top/docs/base.html#_2-img-%E7%9A%84title%E5%92%8Calt%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a>2 <code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ul><li>通常当鼠标滑动到元素上的时候显示</li><li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li></ul><h3 id="3-HTTP的几种请求方法用途"><a href="#3-HTTP的几种请求方法用途" class="headerlink" title="#3 HTTP的几种请求方法用途"></a><a href="http://interview.poetries.top/docs/base.html#_3-http%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E7%94%A8%E9%80%94">#</a>3 HTTP的几种请求方法用途</h3><ul><li><code>GET</code>方法<ul><li>发送一个请求来取得服务器上的某一资源</li></ul></li><li><code>POST</code>方法<ul><li>向<code>URL</code>指定的资源提交数据或附加新的数据</li></ul></li><li><code>PUT</code>方法<ul><li>跟<code>POST</code>方法很像，也是想服务器提交数据。但是，它们之间有不同。<code>PUT</code>指定了资源在服务器上的位置，而<code>POST</code>没有</li></ul></li><li><code>HEAD</code>方法<ul><li>只请求页面的首部</li></ul></li><li><code>DELETE</code>方法<ul><li>删除服务器上的某资源</li></ul></li><li><code>OPTIONS</code>方法<ul><li>它用于获取当前<code>URL</code>所支持的方法。如果请求成功，会有一个<code>Allow</code>的头包含类似<code>“GET,POST”</code>这样的信息</li></ul></li><li><code>TRACE</code>方法<ul><li><code>TRACE</code>方法被用于激发一个远程的，应用层的请求消息回路</li></ul></li><li><code>CONNECT</code>方法<ul><li>把请求连接转换到透明的<code>TCP/IP</code>通道</li></ul></li></ul><h3 id="4-从浏览器地址栏输入url到显示页面的步骤"><a href="#4-从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="#4 从浏览器地址栏输入url到显示页面的步骤"></a><a href="http://interview.poetries.top/docs/base.html#_4-%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4">#</a>4 从浏览器地址栏输入url到显示页面的步骤</h3><p><strong>基础版本</strong></p><ul><li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li><li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><p><strong>详细版</strong></p><ol><li><p>在浏览器地址栏输入URL</p></li><li><p>浏览器查看</p><p>缓存</p><p>，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ol><li><p>如果资源未缓存，发起新请求</p></li><li><p>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</p></li><li><p>检验新鲜通常有两个HTTP头进行控制</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Expires</span><br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Cache-Control</span><br></code></pre></td></tr></table></figure><p>：</p><ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li><p>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</p></li><li><p>浏览器<strong>组装一个HTTP（GET）请求报文</strong></p></li><li><p>浏览器</p><p>获取主机ip地址</p><p>，过程如下：</p><ol><li>浏览器缓存</li><li>本机缓存</li><li>hosts文件</li><li>路由器缓存</li><li>ISP DNS缓存</li><li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li></ol></li><li><p>打开一个socket与目标IP地址，端口建立TCP链接</p><p>，三次握手如下：</p><ol><li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端口</li><li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li><li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li></ol></li><li><p>TCP链接建立后<strong>发送HTTP请求</strong></p></li><li><p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p></li><li><p>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</p></li><li><p>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p></li><li><p>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></p></li><li><p>浏览器接收HTTP响应，然后根据情况选择</p><p>关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下</p><p>：</p><ol><li>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</li><li>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</li><li>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</li><li>主动方发送<strong>ACK=Y， Seq=X</strong>报文</li></ol></li><li><p>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p></li><li><p>如果资源可缓存，<strong>进行缓存</strong></p></li><li><p>对响应进行<strong>解码</strong>（例如gzip压缩）</p></li><li><p>根据资源类型决定如何处理（假设资源为HTML文档）</p></li><li><p><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</p></li><li><p>构建DOM树</p><p>：</p><ol><li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li><li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li><li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li></ol></li><li><p>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></p></li><li><p>构建</p><p>CSSOM树</p><p>：</p><ol><li><strong>Tokenizing</strong>：字符流转换为标记流</li><li><strong>Node</strong>：根据标记创建节点</li><li><strong>CSSOM</strong>：节点创建CSSOM树</li></ol></li><li><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction">根据DOM树和CSSOM树构建渲染树 (opens new window)</a></p><p>:</p><ol><li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></li><li>对每一个可见节点，找到恰当的CSSOM规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li><p>js解析如下</p><p>：</p><ol><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></li><li>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></li><li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本**禁止使用document.write()**，它们可以访问自己script和之前的文档元素</li><li>当文档完成解析，document.readState变成interactive</li><li>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</li><li>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete，window触发load事件</li></ol></li><li><p><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</p></li></ol><p><strong>详细简版</strong></p><ol><li>从浏览器接收<code>url</code>到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</li><li>开启网络线程到发出一个完整的<code>HTTP</code>请求（这一部分涉及到dns查询，<code>TCP/IP</code>请求，五层因特网协议栈等知识）</li><li>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li><li>后台和前台的<code>HTTP</code>交互（这一部分包括<code>HTTP</code>头部、响应码、报文结构、<code>cookie</code>等知识，可以提下静态资源的<code>cookie</code>优化，以及编码解码，如<code>gzip</code>压缩等）</li><li>单独拎出来的缓存问题，<code>HTTP</code>的缓存（这部分包括http缓存头部，<code>ETag</code>，<code>catch-control</code>等）</li><li>浏览器接收到<code>HTTP</code>数据包后的解析流程（解析<code>html</code>-词法分析然后解析成<code>dom</code>树、解析<code>css</code>生成<code>css</code>规则树、合并成<code>render</code>树，然后<code>layout</code>、<code>painting</code>渲染、复合图层的合成、<code>GPU</code>绘制、外链资源的处理、<code>loaded</code>和<code>DOMContentLoaded</code>等）</li><li><code>CSS</code>的可视化格式模型（元素的渲染规则，如包含块，控制框，<code>BFC</code>，<code>IFC</code>等概念）</li><li><code>JS</code>引擎解析过程（<code>JS</code>的解释阶段，预处理阶段，执行阶段生成执行上下文，<code>VO</code>，作用域链、回收机制等等）</li><li>其它（可以拓展不同的知识模块，如跨域，web安全，<code>hybrid</code>模式等等内容）</li></ol><h3 id="5-如何进行网站性能优化"><a href="#5-如何进行网站性能优化" class="headerlink" title="#5 如何进行网站性能优化"></a><a href="http://interview.poetries.top/docs/base.html#_5-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">#</a>5 如何进行网站性能优化</h3><ul><li><code>content</code>方面<ul><li>减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵、<code>inline Image</code></li><li>减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名</li><li>减少<code>DOM</code>元素数量</li></ul></li><li><code>Server</code>方面<ul><li>使用<code>CDN</code></li><li>配置<code>ETag</code></li><li>对组件使用<code>Gzip</code>压缩</li></ul></li><li><code>Cookie</code>方面<ul><li>减小<code>cookie</code>大小</li></ul></li><li><code>css</code>方面<ul><li>将样式表放到页面顶部</li><li>不使用<code>CSS</code>表达式</li><li>使用<code>&lt;link&gt;</code>不使用<code>@import</code></li></ul></li><li><code>Javascript</code>方面<ul><li>将脚本放到页面底部</li><li>将<code>javascript</code>和<code>css</code>从外部引入</li><li>压缩<code>javascript</code>和<code>css</code></li><li>删除不需要的脚本</li><li>减少<code>DOM</code>访问</li></ul></li><li>图片方面<ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化<code>css</code>精灵</li><li>不要在<code>HTML</code>中拉伸图片</li></ul></li></ul><p><strong>你有用过哪些前端性能优化的方法？</strong></p><ul><li>减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li><li>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li><li>当需要设置的样式很多时设置className而不是直接操作style</li><li>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作</li><li>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)</li><li>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</li><li>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢</li></ul><p><strong>谈谈性能优化问题</strong></p><ul><li>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器</li><li>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</li><li>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载</li><li>请求带宽：压缩文件，开启GZIP</li></ul><p><strong>前端性能优化最佳实践？</strong></p><ul><li>性能评级工具（PageSpeed 或 YSlow）</li><li>合理设置 HTTP 缓存：Expires 与 Cache-control</li><li>静态资源打包，开启 Gzip 压缩（节省响应流量）</li><li>CSS3 模拟图像，图标base64（降低请求数）</li><li>模块延迟(defer)加载/异步(async)加载</li><li>Cookie 隔离（节省请求流量）</li><li>localStorage（本地存储）</li><li>使用 CDN 加速（访问最近服务器）</li><li>启用 HTTP/2（多路复用，并行加载）</li><li>前端自动化（gulp/webpack）</li></ul><h3 id="6-HTTP状态码及其含义"><a href="#6-HTTP状态码及其含义" class="headerlink" title="#6 HTTP状态码及其含义"></a><a href="http://interview.poetries.top/docs/base.html#_6-http%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89">#</a>6 HTTP状态码及其含义</h3><ul><li><pre><code>1XX<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  ：信息状态码<br><br>  - `100 <span class="hljs-keyword">Continue</span>` 继续，一般在发送`post`请求时，已发送了`http header`之后服务端将返回此信息，表示确认，之后发送具体参数信息<br><br>- ```<br>  <span class="hljs-number">2</span>XX<br></code></pre></td></tr></table></figure>：成功状态码- `200 OK` 正常返回信息- `201 Created` 请求成功并且服务器创建了新的资源- `202 Accepted` 服务器已接受请求，但尚未处理</code></pre></li><li><pre><code>3XX<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  ：重定向<br><br>  - `301 Moved Permanently` 请求的网页已永久移动到新位置。<br>  - `302 Found` 临时性重定向。<br>  - `303 See Other` 临时性重定向，且总是使用 `GET` 请求新的 `URI`。<br>  - `304 <span class="hljs-literal">Not</span> Modified` 自从上次请求后，请求的网页未修改过。<br><br>- ```<br>  <span class="hljs-number">4</span>XX<br></code></pre></td></tr></table></figure>：客户端错误- `400 Bad Request` 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。- `401 Unauthorized` 请求未授权。- `403 Forbidden` 禁止访问。- `404 Not Found` 找不到如何与 `URI` 相匹配的资源。</code></pre></li><li><pre><code>5XX:<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs http"><br>   <br><br>  服务器错误<br><br>  - `500 Internal Server Error` 最常见的服务器端错误。<br>  - `503 Service Unavailable` 服务器端暂时无法处理请求（可能是过载或维护）。<br><br>### [#](http://interview.poetries.top/docs/base.html#_7-语义化的理解)7 语义化的理解<br><br>- 用正确的标签做正确的事情！<br>- `HTML`语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；<br>- 在没有样式`CSS`情况下也以一种文档格式显示，并且是容易阅读的。<br>- 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 `SEO`。<br>- 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解<br><br>### [#](http://interview.poetries.top/docs/base.html#_8-介绍一下你对浏览器内核的理解)8 介绍一下你对浏览器内核的理解？<br><br>- 主要分成两部分：渲染引擎(`layout engineer`或`Rendering Engine`)和`JS`引擎<br>- 渲染引擎：负责取得网页的内容（`HTML`、`XML`、图像等等）、整理讯息（例如加入`CSS`等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核<br>- `JS`引擎则：解析和执行`javascript`来实现网页的动态效果<br>- 最开始渲染引擎和`JS`引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎<br><br>**常见的浏览器内核有哪些**<br><br>- `Trident`内核：`IE,MaxThon,TT,The World,360`,搜狗浏览器等。[又称MSHTML]<br>- `Gecko`内核：`Netscape6`及以上版本，`FF,MozillaSuite/SeaMonkey`等<br>- `Presto`内核：`Opera7`及以上。 [`Opera`内核原为：Presto，现为：`Blink`;]<br>- `Webkit`内核：`Safari,Chrome`等。 [ `Chrome`的`Blink`（`WebKit`的分支）]<br><br>### [#](http://interview.poetries.top/docs/base.html#_9-html5有哪些新特性、移除了那些元素)9 html5有哪些新特性、移除了那些元素？<br><br>- `HTML5` 现在已经不是 `SGML` 的子集，主要是关于图像，位置，存储，多任务等功能的增加<br>  - 新增选择器 `document.querySelector`、`document.querySelectorAll`<br>  - 拖拽释放(`Drag and drop`) API<br>  - 媒体播放的 `video` 和 `audio`<br>  - 本地存储 `localStorage` 和 `sessionStorage`<br>  - 离线应用 `manifest`<br>  - 桌面通知 `Notifications`<br>  - 语意化标签 `article`、`footer`、`header`、`nav`、`section`<br>  - 增强表单控件 `calendar`、`date`、`time`、`email`、`url`、`search`<br>  - 地理位置 `Geolocation`<br>  - 多任务 `webworker`<br>  - 全双工通信协议 `websocket`<br>  - 历史管理 `history`<br>  - 跨域资源共享(CORS) `Access-Control-Allow-Origin`<br>  - 页面可见性改变事件 `visibilitychange`<br>  - 跨窗口通信 `PostMessage`<br>  - `Form Data` 对象<br>  - 绘画 `canvas`<br>- 移除的元素：<br>  - 纯表现的元素：`basefont`、`big`、`center`、`font`、 `s`、`strike`、`tt`、`u`<br>  - 对可用性产生负面影响的元素：`frame`、`frameset`、`noframes`<br>- 支持`HTML5`新标签：<br>  - `IE8/IE7/IE6`支持通过`document.createElement`方法产生的标签<br>  - 可以利用这一特性让这些浏览器支持`HTML5`新标签<br>  - 浏览器支持新标签后，还需要添加标签默认的样式<br>- 当然也可以直接使用成熟的框架、比如`html5shim`<br><br>**如何区分 HTML 和 HTML5**<br><br>- `DOCTYPE`声明、新增的结构元素、功能元素<br><br>### [#](http://interview.poetries.top/docs/base.html#_10-html5的离线储存怎么使用-工作原理能不能解释一下)10 `HTML5`的离线储存怎么使用，工作原理能不能解释一下？<br><br>- 在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件<br>- 原理：`HTML5`的离线存储是基于一个新建的`.appcache`文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像`cookie`一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示<br>- 如何使用：<br>  - 页面头部像下面一样加入一个`manifest`的属性；<br>  - 在`cache.manifest`文件的编写离线存储的资源<br>  - 在离线状态时，操作`window.applicationCache`进行需求实现<br><br>```json<br>CACHE MANIFEST<br>#v0.11<br><span class="hljs-attribute">CACHE:</span><br><span class="hljs-attribute">js/app.js</span><br><span class="hljs-attribute">css/style.css</span><br><span class="hljs-attribute">NETWORK:</span><br><span class="hljs-attribute">resourse/logo.png</span><br><span class="hljs-attribute">FALLBACK:</span><br><span class="hljs-attribute">/offline.html</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h3 id="11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="#11 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a><a href="http://interview.poetries.top/docs/base.html#_11-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AF%B9html5%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%91%A2">#</a>11 浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</h3><ul><li>在线的情况下，浏览器发现<code>html</code>头部有<code>manifest</code>属性，它会请求<code>manifest</code>文件，如果是第一次访问<code>app</code>，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过<code>app</code>并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code>文件与旧的<code>manifest</code>文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul><h3 id="12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="#12 请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a><a href="http://interview.poetries.top/docs/base.html#_12-%E8%AF%B7%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-cookies-sessionstorage-%E5%92%8C-localstorage-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a>12 请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3><ul><li><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li><li><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</li><li>存储大小：<ul><li><code>cookie</code>数据大小不能超过4k</li><li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</li></ul></li><li>有期时间：<ul><li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除</li><li><code>cookie</code> 设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><h3 id="13-iframe有那些缺点？"><a href="#13-iframe有那些缺点？" class="headerlink" title="#13 iframe有那些缺点？"></a><a href="http://interview.poetries.top/docs/base.html#_13-iframe%E6%9C%89%E9%82%A3%E4%BA%9B%E7%BC%BA%E7%82%B9">#</a>13 iframe有那些缺点？</h3><ul><li><code>iframe</code>会阻塞主页面的<code>Onload</code>事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于<code>SEO</code></li><li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li></ul><h3 id="14-WEB标准以及W3C标准是什么"><a href="#14-WEB标准以及W3C标准是什么" class="headerlink" title="#14 WEB标准以及W3C标准是什么?"></a><a href="http://interview.poetries.top/docs/base.html#_14-web%E6%A0%87%E5%87%86%E4%BB%A5%E5%8F%8Aw3c%E6%A0%87%E5%87%86%E6%98%AF%E4%BB%80%E4%B9%88">#</a>14 WEB标准以及W3C标准是什么?</h3><ul><li>标签闭合、标签小写、不乱嵌套、使用外链<code>css</code>和<code>js</code>、结构行为表现的分离</li></ul><h3 id="15-xhtml和html有什么区别"><a href="#15-xhtml和html有什么区别" class="headerlink" title="#15 xhtml和html有什么区别?"></a><a href="http://interview.poetries.top/docs/base.html#_15-xhtml%E5%92%8Chtml%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a>15 xhtml和html有什么区别?</h3><ul><li>一个是功能上的差别<ul><li>主要是<code>XHTML</code>可兼容各大浏览器、手机以及<code>PDA</code>，并且浏览器也能快速正确地编译网页</li></ul></li><li>另外是书写习惯的差别<ul><li><code>XHTML</code> 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul><h3 id="16-Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#16-Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="#16 Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a><a href="http://interview.poetries.top/docs/base.html#_16-doctype%E4%BD%9C%E7%94%A8-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E6%84%8F%E4%B9%89">#</a>16 Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><ul><li>页面被加载的时，<code>link</code>会同时被加载，而<code>@imort</code>页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的<code>CSS</code>会等到页面被加载完再加载 <code>import</code>只在<code>IE5</code>以上才能识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题 <code>link</code>方式的样式的权重 高于<code>@import</code>的权重</li><li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档</li><li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 <code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现</li></ul><h3 id="17-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？"><a href="#17-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？" class="headerlink" title="#17 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？"></a><a href="http://interview.poetries.top/docs/base.html#_17-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B-%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B-%E7%A9%BA-void-%E5%85%83%E7%B4%A0%E6%9C%89%E9%82%A3%E4%BA%9B-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a>17 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</h3><ul><li>行内元素有：<code>a b span img input select strong</code></li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4… p</code></li><li>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li><li>行内元素不可以设置宽高，不独占一行</li><li>块级元素可以设置宽高，独占一行</li></ul><h3 id="18-HTML全局属性-global-attribute-有哪些"><a href="#18-HTML全局属性-global-attribute-有哪些" class="headerlink" title="#18 HTML全局属性(global attribute)有哪些"></a><a href="http://interview.poetries.top/docs/base.html#_18-html%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7-global-attribute-%E6%9C%89%E5%93%AA%E4%BA%9B">#</a>18 HTML全局属性(global attribute)有哪些</h3><ul><li><code>class</code>:为元素设置类标识</li><li><code>data-*</code>: 为元素增加自定义属性</li><li><code>draggable</code>: 设置元素是否可拖拽</li><li><code>id</code>: 元素<code>id</code>，文档内唯一</li><li><code>lang</code>: 元素内容的的语言</li><li><code>style</code>: 行内<code>css</code>样式</li><li><code>title</code>: 元素相关的建议信息</li></ul><h3 id="19-Canvas和SVG有什么区别？"><a href="#19-Canvas和SVG有什么区别？" class="headerlink" title="#19 Canvas和SVG有什么区别？"></a><a href="http://interview.poetries.top/docs/base.html#_19-canvas%E5%92%8Csvg%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a>19 Canvas和SVG有什么区别？</h3><ul><li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li><li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会失真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li></ul><h3 id="20-HTML5-为什么只需要写"><a href="#20-HTML5-为什么只需要写" class="headerlink" title="#20 HTML5 为什么只需要写 "></a><a href="http://interview.poetries.top/docs/base.html#_20-html5-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AA%E9%9C%80%E8%A6%81%E5%86%99">#</a>20 HTML5 为什么只需要写 <!DOCTYPE HTML></h3><ul><li><code>HTML5</code> 不基于 <code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li><li>而<code>HTML4.01</code>基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型</li></ul><h3 id="21-如何在页面上实现一个圆形的可点击区域？"><a href="#21-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="#21 如何在页面上实现一个圆形的可点击区域？"></a><a href="http://interview.poetries.top/docs/base.html#_21-%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E7%9A%84%E5%8F%AF%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F">#</a>21 如何在页面上实现一个圆形的可点击区域？</h3><ul><li><code>svg</code></li><li><code>border-radius</code></li><li>纯<code>js</code>实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><h3 id="22-网页验证码是干嘛的，是为了解决什么安全问题"><a href="#22-网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="#22 网页验证码是干嘛的，是为了解决什么安全问题"></a><a href="http://interview.poetries.top/docs/base.html#_22-%E7%BD%91%E9%A1%B5%E9%AA%8C%E8%AF%81%E7%A0%81%E6%98%AF%E5%B9%B2%E5%98%9B%E7%9A%84-%E6%98%AF%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">#</a>22 网页验证码是干嘛的，是为了解决什么安全问题</h3><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><h3 id="23-viewport"><a href="#23-viewport" class="headerlink" title="#23 viewport"></a><a href="http://interview.poetries.top/docs/base.html#_23-viewport">#</a>23 viewport</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;</span> /&gt;    <span class="hljs-comment">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’    // device-width  设备宽度    // height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置    // initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数    // minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数    // maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数    // user-scalable    是否允许手动缩放</span><br></code></pre></td></tr></table></figure><ul><li>延伸提问<ul><li>怎样处理 移动端 <code>1px</code> 被 渲染成 <code>2px</code>问题</li></ul></li></ul><p><strong>局部处理</strong></p><ul><li><code>meta</code>标签中的 <code>viewport</code>属性 ，<code>initial-scale</code> 设置为 <code>1</code></li><li><code>rem</code>按照设计稿标准走，外加利用<code>transfrome</code> 的<code>scale(0.5)</code> 缩小一倍即可；</li></ul><p><strong>全局处理</strong></p><ul><li><code>mate</code>标签中的 <code>viewport</code>属性 ，<code>initial-scale</code> 设置为 <code>0.5</code></li><li><code>rem</code> 按照设计稿标准走即可</li></ul><h3 id="24-渲染优化"><a href="#24-渲染优化" class="headerlink" title="#24 渲染优化"></a><a href="http://interview.poetries.top/docs/base.html#_24-%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96">#</a>24 渲染优化</h3><ul><li>禁止使用<code>iframe</code>（阻塞父文档<code>onload</code>事件）<ul><li><code>iframe</code>会阻塞主页面的<code>Onload</code>事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li><li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code></li><li>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li></ul></li><li>禁止使用<code>gif</code>图片实现<code>loading</code>效果（降低<code>CPU</code>消耗，提升渲染性能）</li><li>使用<code>CSS3</code>代码代替<code>JS</code>动画（尽可能避免重绘重排以及回流）</li><li>对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费<code>CPU</code><ul><li>小图标优势在于<ul><li>减少<code>HTTP</code>请求</li><li>避免文件跨域</li><li>修改及时生效</li></ul></li></ul></li><li>页面头部的<code>&lt;style&gt;&lt;/style&gt;</code> <code>&lt;script&gt;&lt;/script&gt;</code> 会阻塞页面；（因为 <code>Renderer</code>进程中 <code>JS</code>线程和渲染线程是互斥的）</li><li>页面中空的 <code>href</code> 和 <code>src</code> 会阻塞页面其他资源的加载 (阻塞下载进程)</li><li>网页<code>gzip</code>，<code>CDN</code>托管，<code>data</code>缓存 ，图片服务器</li><li>前端模板 JS+数据，减少由于<code>HTML</code>标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用<code>innerHTML</code>代替<code>DOM</code>操作，减少<code>DOM</code>操作次数，优化<code>javascript</code>性能</li><li>当需要设置的样式很多时设置<code>className</code>而不是直接操作<code>style</code></li><li>少用全局变量、缓存<code>DOM</code>节点查找的结果。减少<code>IO</code>读取操作</li><li>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</li><li>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘<code>IO</code></li></ul><h3 id="25-meta-viewport相关"><a href="#25-meta-viewport相关" class="headerlink" title="#25 meta viewport相关"></a><a href="http://interview.poetries.top/docs/base.html#_25-meta-viewport%E7%9B%B8%E5%85%B3">#</a>25 meta viewport相关</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>  <span class="hljs-comment">&lt;!--H5标准声明，使用 HTML5 doctype，不区分大小写--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">”en”</span>&gt;</span> <span class="hljs-comment">&lt;!--标准的 lang 属性写法--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">’utf-8′</span>&gt;</span>    <span class="hljs-comment">&lt;!--声明文档使用的字符编码--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”X-UA-Compatible”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”IE</span>=<span class="hljs-string">edge,chrome</span>=<span class="hljs-string">1″/</span>&gt;</span>   <span class="hljs-comment">&lt;!--优先使用 IE 最新版本和 Chrome--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”description”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”不超过150个字符”/</span>&gt;</span>       <span class="hljs-comment">&lt;!--页面描述--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”keywords”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">””/</span>&gt;</span>     <span class="hljs-comment">&lt;!-- 页面关键词--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”author”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”name,</span> <span class="hljs-attr">email</span>@<span class="hljs-attr">gmail.com</span>”/&gt;</span>    <span class="hljs-comment">&lt;!--网页作者--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”robots”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”index,follow”/</span>&gt;</span>      <span class="hljs-comment">&lt;!--搜索引擎抓取--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”viewport”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”initial-scale</span>=<span class="hljs-string">1,</span> <span class="hljs-attr">maximum-scale</span>=<span class="hljs-string">3,</span> <span class="hljs-attr">minimum-scale</span>=<span class="hljs-string">1,</span> <span class="hljs-attr">user-scalable</span>=<span class="hljs-string">no”</span>&gt;</span> <span class="hljs-comment">&lt;!--为移动设备添加 viewport--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”apple-mobile-web-app-title”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”标题”</span>&gt;</span> <span class="hljs-comment">&lt;!--iOS 设备 begin--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”apple-mobile-web-app-capable”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”yes”/</span>&gt;</span>  <span class="hljs-comment">&lt;!--添加到主屏后的标题（iOS 6 新增）是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”apple-itunes-app”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”app-id</span>=<span class="hljs-string">myAppStoreID,</span> <span class="hljs-attr">affiliate-data</span>=<span class="hljs-string">myAffiliateData,</span> <span class="hljs-attr">app-argument</span>=<span class="hljs-string">myURL”</span>&gt;</span><span class="hljs-comment">&lt;!--添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”apple-mobile-web-app-status-bar-style”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”black”/</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”format-detection”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”telphone</span>=<span class="hljs-string">no,</span> <span class="hljs-attr">email</span>=<span class="hljs-string">no”/</span>&gt;</span>  <span class="hljs-comment">&lt;!--设置苹果工具栏颜色--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”renderer”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”webkit”</span>&gt;</span> <span class="hljs-comment">&lt;!-- 启用360浏览器的极速模式(webkit)--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”X-UA-Compatible”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”IE</span>=<span class="hljs-string">edge”</span>&gt;</span>     <span class="hljs-comment">&lt;!--避免IE使用兼容模式--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”Cache-Control”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”no-siteapp”</span> /&gt;</span>    <span class="hljs-comment">&lt;!--不让百度转码--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”HandheldFriendly”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”true”</span>&gt;</span>     <span class="hljs-comment">&lt;!--针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”MobileOptimized”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”320″</span>&gt;</span>   <span class="hljs-comment">&lt;!--微软的老式浏览器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”screen-orientation”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”portrait”</span>&gt;</span>   <span class="hljs-comment">&lt;!--uc强制竖屏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”x5-orientation”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”portrait”</span>&gt;</span>    <span class="hljs-comment">&lt;!--QQ强制竖屏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”full-screen”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”yes”</span>&gt;</span>              <span class="hljs-comment">&lt;!--UC强制全屏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”x5-fullscreen”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”true”</span>&gt;</span>       <span class="hljs-comment">&lt;!--QQ强制全屏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”browsermode”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”application”</span>&gt;</span>   <span class="hljs-comment">&lt;!--UC应用模式--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”x5-page-mode”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”app”</span>&gt;</span>   <span class="hljs-comment">&lt;!-- QQ应用模式--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”msapplication-tap-highlight”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”no”</span>&gt;</span>    <span class="hljs-comment">&lt;!--windows phone 点击无高亮设置页面不缓存--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”pragma”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”no-cache”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”cache-control”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”no-cache”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">”expires”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”0″</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="26-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么"><a href="#26-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么" class="headerlink" title="#26 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?"></a><a href="http://interview.poetries.top/docs/base.html#_26-%E4%BD%A0%E5%81%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%9C%A8%E5%93%AA%E4%BA%9B%E6%B5%81%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95%E8%BF%87-%E8%BF%99%E4%BA%9B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%86%85%E6%A0%B8%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">#</a>26 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</h3><ul><li><code>IE</code>: <code>trident</code>内核</li><li><code>Firefox</code>：<code>gecko</code>内核</li><li><code>Safari</code>:<code>webkit</code>内核</li><li><code>Opera</code>:以前是<code>presto</code>内核，<code>Opera</code>现已改用Google - <code>Chrome</code>的<code>Blink</code>内核</li><li><code>Chrome:Blink</code>(基于<code>webkit</code>，Google与Opera Software共同开发)</li></ul><h3 id="27-div-css的布局较table布局有什么优点？"><a href="#27-div-css的布局较table布局有什么优点？" class="headerlink" title="#27 div+css的布局较table布局有什么优点？"></a><a href="http://interview.poetries.top/docs/base.html#_27-div-css%E7%9A%84%E5%B8%83%E5%B1%80%E8%BE%83table%E5%B8%83%E5%B1%80%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9">#</a>27 div+css的布局较table布局有什么优点？</h3><ul><li>改版的时候更方便 只要改<code>css</code>文件。</li><li>页面加载速度更快、结构化清晰、页面显示简洁。</li><li>表现与结构相分离。</li><li>易于优化（<code>seo</code>）搜索引擎更友好，排名更容易靠前。</li></ul><h3 id="28-a：img的alt与title有何异同？b：strong与em的异同？"><a href="#28-a：img的alt与title有何异同？b：strong与em的异同？" class="headerlink" title="#28 a：img的alt与title有何异同？b：strong与em的异同？"></a><a href="http://interview.poetries.top/docs/base.html#_28-a-img%E7%9A%84alt%E4%B8%8Etitle%E6%9C%89%E4%BD%95%E5%BC%82%E5%90%8C-b-strong%E4%B8%8Eem%E7%9A%84%E5%BC%82%E5%90%8C">#</a>28 a：img的alt与title有何异同？b：strong与em的异同？</h3><ul><li><code>alt(alt text)</code>:为不能显示图像、窗体或<code>applets</code>的用户代理（<code>UA</code>），<code>alt</code>属性用来指定替换文字。替换文字的语言由<code>lang</code>属性指定。(在IE浏览器下会在没有<code>title</code>时把<code>alt</code>当成 <code>tool tip</code>显示)</li><li><code>title(tool tip)</code>:该属性为设置该属性的元素提供建议性的信息</li><li><code>strong</code>:粗体强调标签，强调，表示内容的重要性</li><li><code>em</code>:斜体强调标签，更强烈强调，表示内容的强调点</li></ul><h3 id="29-你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#29-你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="#29 你能描述一下渐进增强和优雅降级之间的不同吗"></a><a href="http://interview.poetries.top/docs/base.html#_29-%E4%BD%A0%E8%83%BD%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%8D%E5%90%8C%E5%90%97">#</a>29 你能描述一下渐进增强和优雅降级之间的不同吗</h3><ul><li>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li><li>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li></ul><blockquote><p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p></blockquote><h3 id="30-为什么利用多个域名来存储网站资源会更有效？"><a href="#30-为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="#30 为什么利用多个域名来存储网站资源会更有效？"></a><a href="http://interview.poetries.top/docs/base.html#_30-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%A9%E7%94%A8%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E6%9D%A5%E5%AD%98%E5%82%A8%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90%E4%BC%9A%E6%9B%B4%E6%9C%89%E6%95%88">#</a>30 为什么利用多个域名来存储网站资源会更有效？</h3><ul><li><code>CDN</code>缓存更方便</li><li>突破浏览器并发限制</li><li>节约<code>cookie</code>带宽</li><li>节约主域名的连接数，优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h3 id="31-简述一下src与href的区别"><a href="#31-简述一下src与href的区别" class="headerlink" title="#31 简述一下src与href的区别"></a><a href="http://interview.poetries.top/docs/base.html#_31-%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8Bsrc%E4%B8%8Ehref%E7%9A%84%E5%8C%BA%E5%88%AB">#</a>31 简述一下src与href的区别</h3><ul><li><code>src</code>用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li><li><code>src</code>是<code>source</code>的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求<code>src</code>资源时会将其指向的资源下载并应用到文档内，例如<code>js</code>脚本，<code>img</code>图片和<code>frame</code>等元素</li></ul><blockquote><script src ="js.js"></script> 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部</blockquote><ul><li><code>href</code>是<code>Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加</li><li><code>&lt;link href=&quot;common.css&quot; rel=&quot;stylesheet&quot;/&gt;</code>那么浏览器会识别该文档为<code>css</code>文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用<code>link</code>方式来加载<code>css</code>，而不是使用<code>@import</code>方式</li></ul><h3 id="32-知道的网页制作会用到的图片格式有哪些？"><a href="#32-知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="#32 知道的网页制作会用到的图片格式有哪些？"></a><a href="http://interview.poetries.top/docs/base.html#_32-%E7%9F%A5%E9%81%93%E7%9A%84%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B">#</a>32 知道的网页制作会用到的图片格式有哪些？</h3><ul><li><code>png-8</code>、<code>png-24</code>、<code>jpeg</code>、<code>gif</code>、<code>svg</code></li></ul><blockquote><p>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是<code>Webp</code>,<code>Apng</code>。（是否有关注新技术，新鲜事物）</p></blockquote><ul><li><strong>Webp</strong>：<code>WebP</code>格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有<code>JPEG</code>的<code>2/3</code>，并能节省大量的服务器带宽资源和数据空间。<code>Facebook Ebay</code>等知名网站已经开始测试并使用<code>WebP</code>格式。</li><li>在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小<code>40%</code>。</li><li><strong>Apng</strong>：全称是<code>“Animated Portable Network Graphics”</code>, 是PNG的位图动画扩展，可以实现png格式的动态图片效果。04年诞生，但一直得不到各大浏览器厂商的支持，直到日前得到 <code>iOS safari 8</code>的支持，有望代替<code>GIF</code>成为下一代动态图标准</li></ul><h3 id="33-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#33-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="#33 在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a><a href="http://interview.poetries.top/docs/base.html#_33-%E5%9C%A8css-js%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%BA%BF%E4%B9%8B%E5%90%8E%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%BB%8F%E5%B8%B8%E4%BC%9A%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD-%E4%BB%8E%E7%94%A8%E6%88%B7%E5%88%B7%E6%96%B0%E7%BD%91%E9%A1%B5%E5%BC%80%E5%A7%8B-%E4%B8%80%E6%AC%A1js%E8%AF%B7%E6%B1%82%E4%B8%80%E8%88%AC%E6%83%85%E5%86%B5%E4%B8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E4%BC%9A%E6%9C%89%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86">#</a>33 在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h3><blockquote><p><code>dns</code>缓存，<code>cdn</code>缓存，浏览器缓存，服务器缓存</p></blockquote><h3 id="34-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"><a href="#34-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。" class="headerlink" title="#34 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"></a><a href="http://interview.poetries.top/docs/base.html#_33-%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%9C%89%E5%A4%A7%E9%87%8F%E7%9A%84%E5%9B%BE%E7%89%87-%E5%A4%A7%E5%9E%8B%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99-%E5%8A%A0%E8%BD%BD%E5%BE%88%E6%85%A2-%E4%BD%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%E4%BC%98%E5%8C%96%E8%BF%99%E4%BA%9B%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%A0%E8%BD%BD-%E7%BB%99%E7%94%A8%E6%88%B7%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%93%E9%AA%8C%E3%80%82">#</a>34 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h3><ul><li>图片懒加载，在页面上的未可视区域可以添加一个滚动事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。</li><li>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。</li><li>如果图片为css图片，可以使用<code>CSSsprite</code>，<code>SVGsprite</code>，<code>Iconfont</code>、<code>Base64</code>等技术。</li><li>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。</li><li>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</li></ul><h3 id="35-网页验证码是干嘛的，是为了解决什么安全问题"><a href="#35-网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="#35 网页验证码是干嘛的，是为了解决什么安全问题"></a>#35 网页验证码是干嘛的，是为了解决什么安全问题</h3><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><h3 id="36-行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"><a href="#36-行内元素有哪些？块级元素有哪些？空（void）元素有哪些？" class="headerlink" title="#36 行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"></a>#36 行内元素有哪些？块级元素有哪些？空（void）元素有哪些？</h3><p>​    </p><ul><li><p>行内元素不可以设置宽高，不独占一行</p></li><li><p>块级元素可以设置宽高，独占一行</p></li></ul><ul><li>行内：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">JAVASCRIPT<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">abbr</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">acronym</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">bdo</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">dfn</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">tt</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>块级：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">JAVASCRIPT<br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">noframes</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>空：</li></ul><p>常见的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JAVASCRIPT</span><br><span class="hljs-section">&lt;br&gt;</span> <span class="hljs-section">&lt;hr&gt;</span> <span class="hljs-section">&lt;img&gt;</span> <span class="hljs-section">&lt;input&gt;</span> <span class="hljs-section">&lt;link&gt;</span> <span class="hljs-section">&lt;meta&gt;</span><br></code></pre></td></tr></table></figure><p>鲜为人知的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JAVASCRIPT</span><br><span class="hljs-section">&lt;area&gt;</span> <span class="hljs-section">&lt;base&gt;</span> <span class="hljs-section">&lt;col&gt;</span> <span class="hljs-section">&lt;command&gt;</span> <span class="hljs-section">&lt;embed&gt;</span> <span class="hljs-section">&lt;link&gt;</span> <span class="hljs-section">&lt;meta&gt;</span><span class="hljs-section">&lt;keygen&gt;</span> <span class="hljs-section">&lt;param&gt;</span> <span class="hljs-section">&lt;source&gt;</span> <span class="hljs-section">&lt;track&gt;</span> <span class="hljs-section">&lt;wbr&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;html知识点总结✌️✌️&quot;&gt;&lt;a href=&quot;#html知识点总结✌️✌️&quot; class=&quot;headerlink&quot; title=&quot;html知识点总结✌️✌️&quot;&gt;&lt;/a&gt;html知识点总结✌️✌️&lt;/h3&gt;&lt;h3 id=&quot;1-前端需要注意哪些SEO&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zhouhanging.github.io/2021/05/21/%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96/"/>
    <id>https://zhouhanging.github.io/2021/05/21/%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96/</id>
    <published>2021-05-21T08:22:45.422Z</published>
    <updated>2021-05-23T11:52:56.116Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title：节流防抖🗽"><a href="#title：节流防抖🗽" class="headerlink" title="title：节流防抖🗽"></a>title：节流防抖🗽</h2><h3 id="节流防抖🗽"><a href="#节流防抖🗽" class="headerlink" title="节流防抖🗽"></a>节流防抖🗽</h3><ul><li><p>定义🎉🎉🎉：</p><ul><li><strong>防抖：</strong>在任务高频率触发时，只有触发间隔超过制定间隔的任务才会执行。即一个动作连续触发则只执行最后一次。防抖的原理则是不管你在一段时间内如何不停的触发事件，只要设置了防抖，则只在触发n秒后才执行。如果我们在一个事件触发的n秒内又触发了相同的事件，那我们便以新的事件时间为标准，n秒之后再执行。</li></ul></li></ul><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timer = flase;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">// 清除未执行的定时器（如果之前已经触发过不到300毫秒又触发了一次则清除之前的）重置回初始化状态</span><br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;函数防抖&quot;</span>)<br>  &#125;, <span class="hljs-number">300</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></code></pre><ul><li><p><strong>节流：</strong>在制定间隔内任务只执行1次。节流的原理是不管你在一段时间内如何不停地触发事件，只要设置了节流，就会每隔一段时间执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> canRun = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!canRun) <span class="hljs-keyword">return</span>;<br>  canRun = <span class="hljs-literal">false</span>;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数节流&#x27;</span>)<br>    canRun = <span class="hljs-literal">true</span><br>  &#125;, <span class="hljs-number">300</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><pre><code>&lt;img src=&quot;C:\Users\l&#39;x\AppData\Roaming\Typora\typora-user-images\image-20210521162630790.png&quot; alt=&quot;image-20210521162630790&quot; style=&quot;zoom:50%;&quot; /&gt;</code></pre><h3 id="原理📣"><a href="#原理📣" class="headerlink" title="原理📣"></a>原理📣</h3><blockquote><p>防抖函数原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时</p><p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行</p></blockquote><blockquote><p>如： 像仿百度搜索，就应该用防抖，当我连续不断输入时，不会发送请求；当我一段时间内不输入了，才会发送一次请求；如果小于这段时间继续输入的话，时间会重新计算，也不会发送请求。</p></blockquote><p>  <strong>手写简化版🚔</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// func是用户传入需要防抖的函数</span><br><span class="hljs-comment">// wait是等待时间</span><br><span class="hljs-keyword">const</span> debounce = <span class="hljs-function">(<span class="hljs-params">func, wait = <span class="hljs-number">50</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 缓存一个定时器id</span><br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 这里返回的函数是每次用户实际调用的防抖函数</span><br>  <span class="hljs-comment">// 如果已经设定过定时器了就清空上一次的定时器</span><br>  <span class="hljs-comment">// 开始一个新的定时器，延迟执行用户传入的方法</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func.apply(<span class="hljs-built_in">this</span>, args)<br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>节流函数原理:规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p></blockquote><blockquote><p>例:（连续不断动都需要调用时用，设一时间间隔），像dom的拖拽，如果用消抖的话，就会出现卡顿的感觉，因为只在停止的时候执行了一次，这个时候就应该用节流，在一定时间内多次执行，会流畅很多</p></blockquote><p>  <strong>手写简版🚔</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// func是用户传入需要防抖的函数</span><br><span class="hljs-comment">// wait是等待时间</span><br><span class="hljs-keyword">const</span> throttle = <span class="hljs-function">(<span class="hljs-params">func, wait = <span class="hljs-number">50</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 上一次执行该函数的时间</span><br>  <span class="hljs-keyword">let</span> lastTime = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-comment">// 当前时间</span><br>    <span class="hljs-keyword">let</span> now = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>    <span class="hljs-comment">// 将当前时间和上一次执行函数时间对比</span><br>    <span class="hljs-comment">// 如果差值大于设置的等待时间就执行函数</span><br>    <span class="hljs-keyword">if</span> (now - lastTime &gt; wait) &#123;<br>      lastTime = now<br>      func.apply(<span class="hljs-built_in">this</span>, args)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">setInterval</span>(<br>  throttle(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">500</span>),<br>  <span class="hljs-number">1</span><br>)<br></code></pre></td></tr></table></figure><h3 id="函数防抖的应用场景🎟️"><a href="#函数防抖的应用场景🎟️" class="headerlink" title="函数防抖的应用场景🎟️"></a>函数防抖的应用场景🎟️</h3><p>  连续的事件，只需触发一次回调的场景有：</p><ul><li><p>搜索框搜索输入。只需用户最后一次输入完，再发送请求</p></li><li><p>手机号、邮箱验证输入检测</p></li><li><p>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</p><h3 id="函数节流的应用场景🎟️"><a href="#函数节流的应用场景🎟️" class="headerlink" title="函数节流的应用场景🎟️"></a>函数节流的应用场景🎟️</h3><p>间隔一段时间执行一次回调的场景有：</p></li><li><p>滚动加载，加载更多或滚到底部监听</p></li><li><p>谷歌搜索框，搜索联想功能</p></li><li><p>高频点击提交，表单重复提交</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;title：节流防抖🗽&quot;&gt;&lt;a href=&quot;#title：节流防抖🗽&quot; class=&quot;headerlink&quot; title=&quot;title：节流防抖🗽&quot;&gt;&lt;/a&gt;title：节流防抖🗽&lt;/h2&gt;&lt;h3 id=&quot;节流防抖🗽&quot;&gt;&lt;a href=&quot;#节流</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zhouhanging.github.io/2021/03/30/github/"/>
    <id>https://zhouhanging.github.io/2021/03/30/github/</id>
    <published>2021-03-30T15:28:59.409Z</published>
    <updated>2021-05-23T11:51:30.938Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-github及git使用相关"><a href="#title-github及git使用相关" class="headerlink" title="title:github及git使用相关"></a>title:github及git使用相关</h2><h3 id="一些-GitHub-的基本概念"><a href="#一些-GitHub-的基本概念" class="headerlink" title="一些 GitHub 的基本概念"></a>一些 GitHub 的基本概念</h3><pre><code>- Repository仓库的意思，即你的项目，你想在 GitHub 上开源一个项目，那就必须要新建一个 Repository ，如果你开源的项目多了，你就拥有了多个 Repositories 。- Issue问题的意思，举个例子，就是你开源了一个项目，别人发现你的项目中有bug，或者哪些地方做的不够好，他就可以给你提个 Issue ，即问题，提的问题多了，也就是 Issues ，然后你看到了这些问题就可以去逐个修复，修复ok了就可以一个个的 Close 掉。- Star这个好理解，就是给项目点赞，但是在 GitHub 上的点赞远比微博、知乎点赞难的多，如果你有一个项目获得100个star都算很不容易了！- Fork这个不好翻译，如果实在要翻译我把他翻译成分叉，什么意思呢？你开源了一个项目，别人想在你这个项目的基础上做些改进，然后应用到自己的项目中，这个时候他就可以 Fork 你的项目，这个时候他的 GitHub 主页上就多了一个项目，只不过这个项目是基于你的项目基础（本质上是在原有项目的基础上新建了一个分支，分支的概念后面会在讲解Git的时候说到），他就可以随心所欲的去改进，但是丝毫不会影响原有项目的代码与结构。- Pull Request发起请求，这个其实是基于 Fork 的，还是上面那个例子，如果别人在你基础上做了改进，后来觉得改进的很不错，应该要把这些改进让更多的人收益，于是就想把自己的改进合并到原有项目里，这个时候他就可以发起一个 Pull Request（简称PR） ，原有项目创建人就可以收到这个请求，这个时候他会仔细review你的代码，并且测试觉得OK了，就会接受你的PR，这个时候你做的改进原有项目就会拥有了。- Watch这个也好理解就是观察，如果你 Watch 了某个项目，那么以后只要这个项目有任何更新，你都会第一时间收到关于这个项目的通知提醒。- Gist有些时候你没有项目可以开源，只是单纯的想分享一些代码片段，那这个时候 Gist 就派上用场了！</code></pre><h4 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h4><pre><code>版本查询 -&gt;    git --version设置当前用户信息      git config --global user.name &quot;xxx&quot;    git config --global user.email &quot;xxx@xxx&quot;显示当前用户信息    git config --list显示git常用指令    git初始化仓库// xxx 代表仓库名/文件夹名    mkdir xxx    cd xxx    git init远程仓库// xx 指远程名称， xxx指远程地址// 如果是git clone得到的仓库，远程名称默认为origin// 添加远程仓库    git remote add xx xxx// 查询远程仓库名    git remote// 查询远程仓库详细信息    git remote -v// 复制远程仓库    git clone// 提交至远程仓库    git push -u xx xxx// 将本地与远程同步    git pull 或 git fetch &amp;&amp; git merge查询仓库状态    git status将文件添加到暂存区    git add.生成“后悔药”    git commit -m &quot;xxx&quot;“后悔药”查询    // 基本查询    git log    // 详细查询，包括修改对比    git log -p    // 以精简模式显示    git log --oneline    // 查看“后悔树”    git log --graph吃“后悔药”，版本回退    // xxx 代表编号或标记，可用git log查询    git checkout xxx    // 回退到最近的版本    git checkout -标记    git tag    // xx 代表标记， xxx代表注释    git tag -a xx -m &quot;xxx&quot;    // 显示标记    git show xx分支    // xxx代表分支名    // 产生分支    git branch xxx    // 分支跳转    git checkout xxx    // 创建并跳转分支    git checkout -b xxx    // 合并分支    git merge</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;title-github及git使用相关&quot;&gt;&lt;a href=&quot;#title-github及git使用相关&quot; class=&quot;headerlink&quot; title=&quot;title:github及git使用相关&quot;&gt;&lt;/a&gt;title:github及git使用相关&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhouhanging.github.io/2021/03/21/HTML%20&amp;%20CSS/"/>
    <id>https://zhouhanging.github.io/2021/03/21/HTML%20&amp;%20CSS/</id>
    <published>2021-03-21T07:20:50.090Z</published>
    <updated>2021-05-23T11:51:14.919Z</updated>
    
    <content type="html"><![CDATA[<p>这是一些关于html和css的笔记</p><h3 id="第一部分-HTML"><a href="#第一部分-HTML" class="headerlink" title="第一部分 HTML"></a>第一部分 HTML</h3><hr><h4 id="第一章-职业规划和前景"><a href="#第一章-职业规划和前景" class="headerlink" title="第一章 职业规划和前景"></a>第一章 职业规划和前景</h4><hr><ul><li><p><strong>职业方向规划定位：</strong></p><ul><li><code>web</code>前端开发工程师</li><li><code>web</code>网站架构师</li><li>自己创业</li><li>转岗管理或其他<a id="more"></a></li></ul></li><li><p><strong><code>web</code>前端开发的前景展望：</strong></p><ul><li>未来<code>IT</code>行业企业需求最多的人才</li><li>结合最新的<code>html5</code>抢占移动端的市场</li><li>自己创业做老板</li><li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li></ul></li><li><p><strong><code>web</code>职业发展目标：</strong></p><ul><li><p>第一、梳理知识架构</p><ul><li>负责内容的<code>HTML</code></li><li>负责外观的<code>css</code>（层叠样式表）</li><li>负责行为的<code>js</code></li><li><code>ps</code>切图</li></ul></li><li><p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p><ul><li><p>起步阶段：</p><ul><li>基本知识的掌握</li><li>常用工具的掌握</li><li>沟通技巧的掌握（围绕客户的需求）</li><li>良好的开发习惯（加注释、对齐方式）</li></ul></li><li><p>提升阶段：</p><ul><li>熟悉掌握<code>HTML</code>基本标签和属性</li><li>熟练掌握<code>css</code>的基本语法和使用</li><li>浏览器兼容和w3c标准的掌握</li><li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li></ul></li><li><p>成型阶段：</p><ul><li>精通<code>DIV</code>+<code>CCS</code>布局</li><li>精通<code>css</code>样式表控制<code>html</code>标签</li><li>熟悉运用<code>js</code>制作动态网站的效果</li><li>能独立开发完成网站</li></ul></li></ul></li></ul></li></ul><hr><h4 id="第二章-html基本结构"><a href="#第二章-html基本结构" class="headerlink" title="第二章 html基本结构"></a>第二章 html基本结构</h4><hr><ul><li><p>认识HTML：</p><ul><li><code>html</code>不是一种编程语言，是一种标志语言</li><li>标记语言是由一套标识标签组成的</li><li><code>html</code>使用标签来描述网页</li></ul></li><li><p><code>html</code>结构：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/main.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 逻辑代码 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 逻辑代码底部 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;head&gt;</code>中添加信息</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;smile@kang.cool&quot;</span>&gt;</span>------作者<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>------网页描述<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;a,b,c&quot;</span>&gt;</span>------关键字,“，”分隔<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;</span>&gt;</span>------设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span>------禁止浏览器从本地机的缓存中调阅页面内容<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Window-target&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;_top&quot;</span>&gt;</span>------用来防止别人在框架里调用你的页面<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;5;URL=http://kahn1990.com/&quot;</span>&gt;</span>------跳转页面，5指时间停留5秒 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>------content的参数有all,none,index,noindex,follow,nofollow，默认是all<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;Shortcut Icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span>&gt;</span>------收藏图标<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache, must-revalidate&quot;</span>&gt;</span>------网页不会被缓存<br></code></pre></td></tr></table></figure><ul><li><p>不成对出现的标签<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></p><ul><li>特殊符号：<ul><li><code>&amp;nbsp</code>; —-&gt;空格</li><li><code>&amp;gt</code>; —&gt;大于号</li><li><code>&amp;lt</code>；—&lt;小于号</li><li><code>&amp;quot</code>；—&gt;引号</li><li><code>&amp;copy</code>;–&gt;版权号</li></ul></li></ul></li></ul><hr><h4 id="第三章-html基本标签"><a href="#第三章-html基本标签" class="headerlink" title="第三章 html基本标签"></a>第三章 html基本标签</h4><hr><ul><li><p><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</p></li><li><p><code>&lt;h1&gt;&lt;/h1</code>—-<code>&lt;h6&gt;&lt;/h6&gt;</code>仅仅用于标题文本，不要为了产生粗体文本使用它们</p></li><li><p><code>&lt;p&gt;</code>标签  段落标签</p></li><li><p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p><ul><li>都会让文字产生加粗效果<ul><li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li><li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li></ul></li></ul></li><li><p><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签</p><ul><li><code>em</code>用于强调文本</li><li><code>i</code>只是视觉斜体效果</li><li><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</li></ul></li><li><p><code>span</code>标签</p><ul><li>对被用来组合文档中的行内元素</li><li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li></ul></li><li><p><code>&lt;pre&gt;</code>标签</p><ul><li>文字的格式按源码的排版来显示，我们称之为预处理格式</li></ul></li><li><p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href </p><ul><li><code>target</code>属性：</li><li><code>_self</code>(在原来页面打开) </li><li><code> _blank</code>（新窗口打开）</li><li><code>_top</code>（打开时忽略所有的框架） </li><li> <code>_parent</code>（在父窗口中打开）</li></ul></li><li><p>创建锚点和锚链接</p><ul><li>锚点也是一种超链接，是页面内进行跳转的超链接<pre><code>- 第一步：创建锚点 `&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;`- 第二步：使用创建好的锚点名称 `&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;`</code></pre></li></ul></li><li><p><code>marquee</code>标签</p><ul><li>可以创建一个内容滚动效果<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">marquee</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;down&quot;</span> <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">this.stop()</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">this.start()</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">marquee</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li><li><code>loop </code>表示滚动循环的次数，默认为无限循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">onmouseover=<span class="hljs-built_in">this</span>.stop()  onmouseover=<span class="hljs-built_in">this</span>.start()  scrollamout=<span class="hljs-string">&quot;1&quot;</span>(滚动速度)<br></code></pre></td></tr></table></figure></li><li><p>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</p></li></ul><hr><h4 id="第四章-img图片标签与路径"><a href="#第四章-img图片标签与路径" class="headerlink" title="第四章 img图片标签与路径"></a>第四章 img图片标签与路径</h4><hr><ul><li><p>图片标签与路径：</p><ul><li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li><li><code>Gif</code>     （只支持全透明）</li><li><code>Jpeg</code> /<code>jpg</code>     </li><li><code>Png</code> 半/全透明都支持</li></ul></li><li><p>图片标签写法 ：</p><ul><li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li></ul></li><li><p>图片四要素：</p><ul><li><code>src=&quot;&quot;</code>        图片路径</li><li><code>alt=&quot;&quot; </code>       图片含义</li><li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li><li><code> height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li><li><code>title=&quot;&quot;</code></li></ul></li><li><p>路径知识：</p><ul><li><p>相对路径、绝对路径：</p><ul><li>相对路径：(Relative Path) 相对于该文件的路径；</li><li>绝对路径：(Absolute Path) 从磁盘出发的路径； </li></ul></li><li><p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br>值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p></li></ul></li><li><p>在静态页面中：</p><ul><li><p><code>/</code>开头表示根目录；</p></li><li><p><code>./</code>表示当前目录；（斜画线前面一个点）</p></li><li><p><code>../</code>上级目录；（斜画线前面两个点）</p></li><li><p>直接用文件名不带/也表示同一目录</p></li></ul><ul><li>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</li></ul></li></ul><hr><h4 id="第五章-三种列表的讲解"><a href="#第五章-三种列表的讲解" class="headerlink" title="第五章 三种列表的讲解"></a>第五章 三种列表的讲解</h4><hr><ul><li>三种列表的知识讲解：<ul><li><code>&lt;ul&gt;</code>无序列表<ul><li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li></ul></li></ul></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;ul&gt;</span><br>   <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>   <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>   <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br><span class="hljs-section">&lt;/ul&gt;</span><br></code></pre></td></tr></table></figure><ul><li><ol>有序列表  - 有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 `<ol>` 标签。每个列表项始于 `<li> `标签。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>列表符号</p><ul><li><p>无序列表-列表符号:</p><ul><li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc” </code> 实心圆  默认值 <code>type=&quot;square&quot; </code> 方块符</li></ul></li><li><p>有序列表-列表符号</p><ul><li><code>type=&quot;A&quot;</code>    A B C D</li><li><code>type=&quot;a&quot;</code>    a b c d</li><li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=”I”    I II III type=”i”     i ii iii</li></ul></li><li><p>列表嵌套</p></li><li><p>无序列表-嵌套</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>柚子<br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>沙田柚<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>蜜柚<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>荔枝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有序列表-嵌套</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>茶<br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>红茶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>绿茶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>果汁<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>牛奶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>定义列表<ul><li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt; </code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li></ul></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">&lt;<span class="hljs-built_in">dl</span>&gt;  <br>     &lt;<span class="hljs-built_in">dt</span>&gt;pc网页制作&lt;/<span class="hljs-built_in">dt</span>&gt;  <br>     &lt;<span class="hljs-built_in">dd</span>&gt;学习<span class="hljs-keyword">DIV</span>+CSS <span class="hljs-keyword">JS</span> JQ 项目实战&lt;/<span class="hljs-built_in">dd</span>&gt;  <br>     &lt;<span class="hljs-built_in">dt</span>&gt;手机网页制作&lt;/<span class="hljs-built_in">dt</span>&gt;  <br>     &lt;<span class="hljs-built_in">dd</span>&gt;手机网页制作实战&lt;/<span class="hljs-built_in">dd</span>&gt;<br>&lt;/<span class="hljs-built_in">dl</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><p><code>dd</code>是对<code>dt</code>的解释</p><ul><li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li><li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>中国城市<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>北京 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>上海 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>广州 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>美国城市<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>华盛顿 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>芝加哥 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>纽约 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>dl</code>是d<code>efinition list</code>的缩写</li><li><code>dt</code>是<code>definition title</code>的缩写</li><li><code>dd</code>是d<code>efinition description</code>的缩写</li></ul><ul><li><code>list-style</code>属性具有三个属性分量：</li><li><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</li><li><code>list-style-type</code>： 设置列表项图标的类型</li><li><code>list-style-image </code>：使用图像设置列表项图标</li></ul><hr><h4 id="第六章-表单元素-上"><a href="#第六章-表单元素-上" class="headerlink" title="第六章 表单元素(上)"></a>第六章 表单元素(上)</h4><hr><ul><li><p>表单标签:</p><ul><li><p><code>&lt;form&gt;</code>表单标签</p><ul><li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span>&gt;<br> &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HTML标签 - <code>Action</code>和确认按钮： </p><ul><li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;html.do&quot; <span class="hljs-keyword">method</span>=&quot;get&quot;&gt;    <br>        username:  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;user&quot; /&gt;   <br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提  交&quot; /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>HTML</code>标签 - 隐藏域隐藏标签：</p></li><li><p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;        <br>     &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;hidden&quot; <span class="hljs-type">name</span>=&quot;hid&quot; <span class="hljs-keyword">value</span>=&quot;value&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;input&gt;</code>标签的掌握</p><ul><li><p>常用<code>type</code>类型：</p><ul><li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li><li><code>type=&quot;text&quot; </code>       单行文本输入框</li><li><code>type=&quot;password&quot;</code>    密码（<code>maxlength=&quot;&quot;</code>）</li><li><code>type=&quot;radio&quot;  </code>     单项选择（<code>checked=&quot;checked&quot;</code>） </li><li><code>type=&quot;checkbox&quot; </code>   多项选择  </li><li><code>type=&quot;button&quot;  </code>    按钮</li><li><code>type=&quot;submit&quot;</code>    提交 <code>type=&quot;image&quot;</code>图片提交</li><li><code>type=&quot;file&quot;</code>    上传文件</li><li><code>type=&quot;reset&quot;    </code>重置</li><li><code>type=&quot;hidden&quot;</code>    隐藏</li></ul></li></ul></li><li><p>关于表单中的设置默认值：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;今天心情不错&quot;</span> /&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> <span class="hljs-type">name</span>=&quot;&quot; &gt;<br> &lt;<span class="hljs-keyword">option</span>  <span class="hljs-keyword">value</span>=&quot;&quot;&gt;&lt;/<span class="hljs-keyword">option</span>&gt;<br> &lt;<span class="hljs-keyword">option</span>  <span class="hljs-keyword">value</span>=&quot;&quot; selected=&quot;selected&quot;&gt;&lt;/<span class="hljs-keyword">option</span>&gt;<br>&lt;<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>textarea</code>没有默认值</p></li><li><p><code>&lt;label&gt;</code>标签的使用</p><ul><li><p><code>&lt;label&gt;&lt;/label&gt;</code></p><ul><li><code>label</code> 元素不会向用户呈现任何特殊效果。</li><li>不过，它为鼠标用户改进了可用性。</li><li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li><li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li></ul></li><li><p><code>&lt;label&gt;</code> 标签的<code> for</code> 属性应当与相关元素的 <code>id </code>属性相同。</p></li><li><p>例子：（重要—注册表单–用户体验–必做）</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>单向选择<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span><span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;sex&quot;</span><span class="hljs-built_in"> id</span>=<span class="hljs-string">&quot;male&quot;</span>/&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span>女：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span><span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;sex&quot;</span>checked=<span class="hljs-string">&quot;check&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="第七章-表单和表格-下"><a href="#第七章-表单和表格-下" class="headerlink" title="第七章 表单和表格(下)"></a>第七章 表单和表格(下)</h4><hr><ul><li><p>表单和表格标签：</p><ul><li><code>&lt;textarea&gt;</code>文本域标签</li><li><code>&lt;textarea&gt;</code>标签：</li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li></ul></li><li><p>注意：</p><ul><li><code>rows</code>表示这个文本域有多少行</li><li><code>cols</code>表示这个文本域有多少列</li></ul></li><li><p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p></li><li><p><code>&lt;select&gt;</code>标签的掌握</p><ul><li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name </code>属性<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;      <br>    &lt;<span class="hljs-keyword">select</span> <span class="hljs-type">name</span>=&quot;&quot;  id=&quot;&quot;&gt;<br>         &lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;1&quot;&gt;<span class="hljs-number">1</span>月&lt;/<span class="hljs-keyword">option</span>&gt;  <br>          &lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;2&quot;&gt;<span class="hljs-number">2</span>月&lt;/<span class="hljs-keyword">option</span>&gt;      <br>&lt;/<span class="hljs-keyword">select</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常用到的属性：<code>disabled=“disabled”  name=&quot;sel&quot;  size=&quot;2&quot;</code></p></li></ul><ul><li><p><code>&lt;table&gt;</code>表格标签</p></li><li><p><code> &lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p></li></ul><ul><li><p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p><ul><li><p><code>&lt;tr&gt;</code>行标签：</p><ul><li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>&lt;td&gt;</code>单元格标签:</p><ul><li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>爱好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li><li><code>border-collapse:collapse</code>;</li><li><code>colspan</code>左右合并</li><li><code>rowspan</code>上下合并</li></ul></li></ul></li></ul><p><strong>第一部分总结</strong>：</p><ul><li><p>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>..</p></li><li><p>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</p></li><li><p>只有可视化标签，才能用<code>css</code>改变它</p></li><li><p>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></p></li><li><p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> ..<code>ul</code> <code>li</code> <code>ol</code> <code> dl</code> ….</p></li><li><p><strong>常用可视化标签</strong></p><ul><li>** <code>div</code>** <ul><li>一般用它来布局</li></ul></li><li><strong>a</strong>  超链接标签<ul><li><code>href</code>*属性：设置跳转的网页地址</li><li><code>target</code>属性：设置跳转的目标</li><li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li></ul></li><li><strong><code>img</code></strong><ul><li><code>src</code>*属性用来设置图片的url数据</li><li><code>alt</code>提供给搜索引擎搜索的</li><li><code>width</code></li><li><code>height</code></li><li>结论 ：显示图片</li></ul></li><li><strong>ul li</strong><ul><li>列表</li><li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li></ul></li><li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong><ul><li>慢慢已经被淘汰了 被ul li代替</li><li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li><li>如果是合并横排的就是合并列（<code>colspan</code>）</li></ul></li></ul></li></ul><hr><p><strong>HTML部分导图总结</strong></p><hr><ul><li><a href="http://www.html5star.com/manual/html5label-meaning/">HTML5标签集合</a></li></ul><p><img src="./H4C2/1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="./H4C2/2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="./H4C2/3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><hr><h3 id="第二部分-CSS"><a href="#第二部分-CSS" class="headerlink" title="第二部分 CSS"></a>第二部分 CSS</h3><hr><h4 id="第八章-css基础知识"><a href="#第八章-css基础知识" class="headerlink" title="第八章 css基础知识"></a>第八章 css基础知识</h4><hr><ul><li><p><code>css</code>基础知识：</p><ul><li><code>css</code>样式表的定义</li><li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li></ul></li><li><p>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面</p><ul><li>外部样式-<code>link</code>调用</li><li>内联样式-标签元素里面</li></ul></li><li><p><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</p></li><li><p><code>css</code>样式表的语法</p><ul><li><p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p></li><li><p>盒子名或者标签名{属性:值;}</p></li><li><p><strong>CSS中几种颜色的表示方法</strong></p><ul><li><strong>用颜色名表示</strong><ul><li>有17个预先确定的颜色，它们是<ul><li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br>　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li></ul></li></ul></li></ul><ul><li><p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p><ul><li><code>#FF0000</code>或者<code>#F00 </code> </li></ul></li><li><p><strong>用rgb(r,g,b)函数表示</strong></p><ul><li>如：<code>rgb(255,255,0)</code></li></ul></li><li><p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p><ul><li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br>蓝色 </li></ul></li><li><p>**用<code>rgba(r,g,b,a)</code>函数表示 **</p><ul><li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li></ul></li><li><p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p><ul><li>色调、饱和度、亮度、透明度 </li></ul></li><li><p>例子</p></li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position:absolute;top:0px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:gray;&quot;</span>&gt;</span>background-color:gray<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#F00;&quot;</span>&gt;</span>background-color:#F00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#ffff00;&quot;</span>&gt;</span>background-color:#ffff00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:rgb(255,0,255);&quot;</span>&gt;</span>background-color:rgb(255,0,255)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:hsl(120,80%,50%);&quot;</span>&gt;</span>background-color:hsl(120,80%,50%)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:rgba(255,0,255,0.5);&quot;</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:hsla(120,80%,50%,0.5);&quot;</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-39e61a813f637282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li>内部样式表<ul><li>当单个页面需要设置样式时，就应该使用内部样式表。</li><li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> &gt;</span><br><span class="css">  <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）  </p></li><li><p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p></li><li><p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;  </code></p></li><li><p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt; </code> </p></li></ul><ul><li><p>内联样式表（优先级高）</p><ul><li><p>写在标签里面的样式</p></li><li><p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p></li></ul></li><li><p>表示给<code>p</code>标签里面的文字颜色设置为红色</p></li><li><p>区别：外链样式与导入样式</p><ul><li><p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。 </p></li><li><p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p></li><li><p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p></li><li><p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p></li></ul></li></ul><hr><ul><li><p><strong>样式的优先级补充</strong></p><ul><li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：<ul><li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li></ul></li></ul></li><li><p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p></li><li><p>层叠优先级是:</p><ul><li> <code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></li></ul></li><li><p>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器 </code>&lt;<code> ID选择器</code> &lt; <code>ID派生选择器</code></p></li><li><p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p><ul><li><code>浏览器缺省</code> &lt;<code> 外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器 </code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器 </code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</li></ul></li><li><p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p><ul><li>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</li></ul></li><li><p>选择器权重</p><table><thead><tr><th>选择器</th><th>权重值</th></tr></thead><tbody><tr><td>!important</td><td>infinity（正无穷）</td></tr><tr><td>行间样式</td><td>1000</td></tr><tr><td>id选择器</td><td>100</td></tr><tr><td>class、属性、伪类选择器</td><td>10</td></tr><tr><td>标签选择器、伪元素选择器</td><td>1</td></tr><tr><td>通配符选择器</td><td>0</td></tr></tbody></table></li></ul><hr><h4 id="第九章-css选择器-上"><a href="#第九章-css选择器-上" class="headerlink" title="第九章 css选择器(上)"></a>第九章 css选择器(上)</h4><ul><li><p><code>css</code>选择器：</p><ul><li><code>class</code>类选择器可以重复利用    </li><li><code>id</code>选择器唯一</li></ul></li><li><p>标签选择器</p><ul><li>什么是选择器：css选择器就是要改变样式的对象</li></ul></li><li><p>选择器<code>&#123;属性:值;属性:值;&#125;</code></p></li><li><p>标签选择器：页面中所有的标签都是一个选择器  <code>p&#123;color:red;&#125;</code></p></li><li><p>通配符选择器 *</p><ul><li>选择全部的元素 以 <code>*</code> 开头，如: <code>*&#123;color:#0f0;&#125;</code></li></ul></li><li><p><code>ID</code>选择器</p><ul><li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1&#123;color:#0f0;&#125;</code></li></ul></li><li><p>类选择器</p><ul><li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first&#123;color:#00f;&#125;</code></li></ul></li><li><p><code>css</code>代码写完后上线前要经过压缩处理 </p></li><li><p>本地和服务器分两个<code>css</code>版本（备份）</p></li><li><p>压缩后注释都清除，空间体积减少</p></li><li><p>群组选择器</p><ul><li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1&#123;color:red;&#125;</code></li></ul></li><li><p>包含选择器</p><ul><li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code>   <ul><li><code>span&#123;color:red;&#125;</code></li></ul></li></ul></li><li><p>属性选择器</p><ul><li>选择包含某一属性的元素</li><li><code>a[title]&#123;color:red;&#125;</code>  选择包含<code>title</code>的<code>a</code>标签</li><li><code>a[title][href]&#123;color:red;&#125;</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li></ul></li><li><p><code>&gt; </code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p><ul><li><code>p &gt; span&#123;color:red;&#125;</code></li></ul></li><li><p>相邻兄弟选择器：只选择后面的相邻兄弟元素</p><ul><li><code>p + span&#123;color:red;&#125;</code></li></ul></li></ul><hr><h4 id="第十章-css选择器-下"><a href="#第十章-css选择器-下" class="headerlink" title="第十章 css选择器(下)"></a>第十章 css选择器(下)</h4><hr><ul><li><p><code>&lt;a&gt;</code>伪类选择器</p><ul><li><p><code>a:link &#123;color:#FF0000;&#125;</code>    /* 超链接未访问时的状态 */ （只用于a标签）</p></li><li><p><code>a:visited &#123;color:#00FF00;&#125;</code>    /* 超链接访问过后的状态 */ （只用于a标签）</p></li><li><p><code>a:hover &#123;color:#FF00FF;&#125;    </code>/* 鼠标悬停状态</p></li><li><p><code>*/</code>（可和其他标签结合一起用）</p></li><li><p><code>a:active &#123;color:#0000FF;&#125;</code>    /* 激活状态，鼠标按下状态 */</p></li><li><p><strong>注意</strong></p><ul><li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li></ul></li></ul></li><li><p>输入伪类选择器（针对表单）</p><ul><li><code>input:focus&#123;color:red;&#125; </code>      /* 键盘输入焦点 */</li></ul></li><li><p>位置伪类选择器（针对表单）</p><ul><li><code>p:first-child&#123;color:red;&#125;</code>     /<code>* 第一个p *</code>/</li><li><code>p:last-child&#123;color:red;&#125;</code>     /<code>* 最后一个p *</code>/</li></ul></li><li><p>伪元素选择器</p><ul><li><code>:before</code> 在元素之前添加内容。</li><li><code>:after</code> 在元素之后添加内容。</li></ul></li><li><p><code>css</code>优先规则</p><ul><li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li></ul></li></ul><hr><h4 id="第十一章-背景属性"><a href="#第十一章-背景属性" class="headerlink" title="第十一章 背景属性"></a>第十一章 背景属性</h4><hr><ul><li><p>背景属性：</p><ul><li><p>背景的添加 ：</p></li><li><p>背景颜色的添加:</p><ul><li><code>background:red;</code></li><li><code>backgronnd-color:red;</code></li></ul></li><li><p>背景图片的添加：</p><ul><li><code>background:url(“images/1.jpg”);</code></li><li><code>backgronnd-image:url(“images/1.jpg”);</code></li></ul></li><li><p>背景的平铺</p></li><li><p>什么是平铺？平铺就是图片是否重复出现</p><ul><li>不平铺：<code>background-repeat:no-repeat;</code></li><li>水平方向平铺：<code>background-repeat:repeat-x;</code></li><li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li><li>完全平铺：默认为完全平铺</li></ul></li><li><p>背景图片的定位</p><ul><li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li><li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li><li><code>background-positon</code>的英文单词取值</li><li><code>top left </code>                   </li><li><code>top  center  </code>                   </li><li><code>top  right</code></li><li><code>center left  </code>            </li><li><code>center  center </code>                   </li><li><code>center right</code></li><li><code>bottom left  </code>           </li><li><code>bottom  center </code>    </li><li><code>ottom right</code></li></ul></li><li><p><code>background-positon</code>的数值取值     </p><ul><li><code>background-position:x  y;</code>  </li></ul></li><li><p><code>positon</code>的百分值取值     </p><ul><li><code>background-position:x%  y%; </code> </li></ul></li><li><p>背景图片的大小</p><ul><li>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</li></ul></li><li><p><code>background-size</code>的数值取值     </p><ul><li><code>background-size:x  y;</code>  </li></ul></li><li><p><code>background-size</code>的数值取值     </p><ul><li><code>background-size:x%  y%;</code></li></ul></li><li><p>背景图片的滚动</p><ul><li><p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p></li><li><p><code>background-attachment:fixed; </code>  固定，不随内容的滚动而滚动    </p></li><li><p><code>background-attachment:scroll; </code> 滚动，随内容的滚动而滚动</p></li></ul></li></ul></li></ul><hr><h4 id="第十二章-文字文本属性"><a href="#第十二章-文字文本属性" class="headerlink" title="第十二章 文字文本属性"></a>第十二章 文字文本属性</h4><hr><ul><li><p><code>css</code>文字文本属性：</p><ul><li><p><strong>文字属性</strong></p><ul><li><code>color:red;</code>    文字颜色</li><li><code>font-size:12px</code>;    文字大小</li><li><code>font-weight:“bold”</code>    文字粗细(<code>bold/normal</code>)</li><li><code>font-family:“宋体”</code>    文字字体</li><li><code>font-variant:small-caps </code>小写字母以大写字母显示</li></ul></li></ul></li></ul><ul><li><p><strong>文本属性</strong></p><ul><li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li><li><code>line-height:10px; </code> 行间距(可通过它实现文本的垂直居中)</li><li><code>text-indent:20px;</code>  首行缩进</li><li><code>text-decoration:none; </code> <ul><li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li></ul></li><li><code>letter-spacing</code>:   字间距</li></ul></li></ul><hr><h4 id="第十三章-盒子模型"><a href="#第十三章-盒子模型" class="headerlink" title="第十三章 盒子模型"></a>第十三章 盒子模型</h4><hr><ul><li><p><strong>盒子模型</strong></p><ul><li>盒子模型就是一个有高度和宽度的矩形区域</li><li>所有<code>html</code>标签都是盒子模型</li><li><code>div</code>标签自定义盒子模型</li></ul></li><li><p>所有的标签都是盒子模型</p><ul><li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li></ul></li><li><p><strong>盒子模型的组成</strong></p><ul><li>盒子模型组成部分：<ul><li>自身内容：<code> width</code>、h<code>eight</code> 宽高</li><li>内边距：   <code>padding</code></li><li>盒子边框： <code>border</code> 边框线</li><li>与其他盒子距离：  <code>margin </code>外边距</li><li>内容+内边距+边框+外边距=面积</li></ul></li></ul></li><li><p><code>border</code> 边框</p><ul><li>常见写法  <code>border:1px solid #f00;</code></li></ul></li><li><p>单独属性：</p><ul><li><code>border-width</code>:</li><li><code>border-style:</code> <ul><li><code>dotted </code> 点状虚线</li><li><code>dashed</code>（虚线）</li><li><code>solid</code>（实线）</li><li><code>double</code>（双实线）</li></ul></li><li><code>border-color</code> (颜色)</li></ul></li><li><p><code>padding</code> 内边距</p><ul><li><p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p><ul><li><code>padding:10px; </code>                      上下左右</li><li><code>padding:10px 10px; </code>                 上下  左右</li><li><code>padding:10px 10px 10px; </code>         上 左右 下</li><li><code>padding:10px 10px 10px 10px; </code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li></ul></li></ul></li><li><p>单独属性：</p><ul><li><code>padding-top:</code></li><li><code>padding-right:</code></li><li><code>padding-bottom:</code></li><li><code> padding-left:</code></li></ul></li><li><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p></li><li><p>margin 外边距</p><ul><li><p>值：与<code>padding</code>相同</p></li><li><p>单独属性：与<code>padding</code>相同</p></li></ul></li><li><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p></li></ul><hr><p><strong>补充盒子模型内容</strong></p><hr><ul><li><p><strong>标准盒子模型</strong></p><ul><li>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie </code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</li></ul></li></ul><p><img src="./H4C2/w3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li><p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content </code>部分不包含其他部分</p></li><li><p>** IE盒子模型**</p></li></ul><p><img src="./H4C2/ie.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><ul><li><p>从上图可以看到 <code>ie </code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></p></li><li><p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border </code>和 <code>padding</code></p></li><li><p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p></li><li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p></li><li><p>例：</p><ul><li>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding </code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></li></ul></li><li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c </code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p></li><li><p>假如不加<code> doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie </code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff </code>会采用标准<code> w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</p></li><li><p>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c </code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p></li></ul><hr><ul><li>用 <code>jquery</code> 做的例子来证实一下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>你用的盒子模型是？<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> sbox = $.boxmodel ? <span class="hljs-string">&quot;标准w3c&quot;</span>:<span class="hljs-string">&quot;ie&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;您的页面目前支持：&quot;</span>+sbox+<span class="hljs-string">&quot;盒子模型&quot;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">public</span> <span class="hljs-meta-string">&quot;-//w3c//dtd xhtml 1.0 transitional//en&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>你用的盒子模型是标准w3c盒子模型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> sbox = $.boxmodel ? <span class="hljs-string">&quot;标准w3c&quot;</span>:<span class="hljs-string">&quot;ie&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;您的页面目前支持：&quot;</span>+sbox+<span class="hljs-string">&quot;盒子模型&quot;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype </code>声明。在所有浏览器中都显示“标准 <code>w3c </code>盒子模型”</li></ul><ul><li><p> 所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p></li><li><p>扩展</p><ul><li><a href="http://www.jianshu.com/p/e2eb0d8c9de6">学会使用box-sizing布局</a></li></ul></li></ul><hr><h4 id="第十四章-块元素、行元素与溢出"><a href="#第十四章-块元素、行元素与溢出" class="headerlink" title="第十四章 块元素、行元素与溢出"></a>第十四章 块元素、行元素与溢出</h4><hr><ul><li><p>基本概念</p><ul><li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li><li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li></ul></li><li><p>行块转换</p><ul><li><code>display:none</code>;  不显示</li><li><code>display:block</code>; 变成块级元素</li><li><code>display:inline</code>; 变成行级元素</li><li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列</li></ul></li><li><p>溢出</p><ul><li><code>overflow:hidden</code>;   溢出隐藏</li><li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li><li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li></ul></li><li><p>文本不换行：<code>white-space:nowrap</code>;</p></li><li><p>长单词换行：<code>word-wrap:break-word</code>;</p></li></ul><ul><li><p>行内元素和快级元素小结</p><ul><li><p>一、<strong>块级元素</strong>：block element</p><ul><li><p>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</p></li><li><p>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</p></li><li><p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p></li></ul></li><li><p>二、<strong>行内元素</strong>：inline element</p><ul><li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN </code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li></ul></li><li><p>三、<strong>block（块）元素的特点:</strong></p><ul><li>①、总是在新行上开始；</li><li>②、高度，行高以及外边距和内边距都可控制；</li><li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li><li>④、它可以容纳内联元素和其他块元素</li></ul></li><li><p>四、<strong>inline元素的特点</strong></p><ul><li>①、和其他元素都在一行上；</li><li>②、高，行高及外边距和内边距不可改变；</li><li>③、宽度就是它的文字或图片的宽度，不可改变</li><li>④、内联元素只能容纳文本或者其他内联元素</li></ul></li><li><p><strong>对行内元素，需要注意如下</strong>:</p><ul><li>设置宽度<code>width</code> 无效。 设置高度<code>height </code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li><li>只有左右<code>margin</code>有效，上下无效。</li><li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li></ul></li><li><p>五、<strong>常见的块状元素</strong></p><ul><li><code>address</code> – 地址</li><li><code>blockquote</code> – 块引用</li><li><code>center</code> – 举中对齐块</li><li><code>dir</code> – 目录列表</li><li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li><li><code>dl</code> – 定义列表</li><li><code>fieldset</code> – <code>form</code>控制组</li><li><code>form</code> – 交互表单</li><li><code>h1</code> – 大标题</li><li><code>h2</code> – 副标题</li><li><code>h3</code> – 3级标题</li><li><code>h4</code> – 4级标题</li><li><code>h5</code> – 5级标题</li><li><code>h6</code> – 6级标题</li><li><code>hr</code> – 水平分隔线</li><li><code>isindex</code> – <code>input prompt</code></li><li><code>menu</code> – 菜单列表</li><li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li><li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li><li><code>ol</code> – 有序表单</li><li><code>p</code> – 段落</li><li><code>pre</code> – 格式化文本</li><li><code>table</code> – 表格</li><li><code>ul</code> – 无序列表</li></ul></li><li><p>六、<strong>常见的内联元素</strong></p><ul><li><code>a</code> – 锚点</li><li><code>abbr</code> – 缩写</li><li><code>acronym</code> – 首字</li><li><code>b</code> – 粗体(不推荐)</li><li><code>bdo</code> – <code>bidi override</code></li><li><code>big</code> – 大字体</li><li><code>br</code> – 换行</li><li><code>cite</code> – 引用</li><li><code>code</code> – 计算机代码(在引用源码的时候需要)</li><li><code>dfn</code> – 定义字段</li><li><code>em</code> – 强调</li><li><code>font</code> – 字体设定(不推荐)</li><li><code>i</code> – 斜体</li><li><code>img</code> – 图片</li><li><code>input</code> – 输入框</li><li><code>kbd</code> – 定义键盘文本</li><li><code>label</code> – 表格标签</li><li><code>q</code> – 短引用</li><li><code>s</code> – 中划线(不推荐)</li><li><code>samp</code> – 定义范例计算机代码</li><li><code>select</code> – 项目选择</li><li><code>small</code> – 小字体文本</li><li><code>span</code> – 常用内联容器，定义文本内区块</li><li><code>strike</code> – 中划线</li><li><code>strong</code> – 粗体强调</li><li><code>sub</code> – 下标</li><li><code>sup</code> – 上标</li><li><code>textarea</code> – 多行文本输入框</li><li><code>tt</code> – 电传文本</li><li><code>u</code> – 下划线</li></ul></li><li><p>七，<strong>可变元素</strong></p><ul><li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li><li><code>applet</code> - <code>java applet</code></li><li><code>button</code> - 按钮</li><li><code>del </code>- 删除文本</li><li><code>iframe</code> - <code>inline frame</code></li><li><code>ins</code> - 插入的文本</li><li><code>map</code> - 图片区块(<code>map</code>)</li><li><code>object</code> - <code>object</code>对象</li><li><code>script</code> - 客户端脚本</li></ul></li><li><p>八、<strong>行内元素与块级元素有什么不同</strong></p><ul><li><p>区别一：</p><ul><li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li><li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li></ul></li><li><p>区别二：</p><ul><li>块级：块级元素可以设置宽高</li><li>行内：行内元素不可以设置宽高</li></ul></li><li><p>区别三：</p><ul><li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li><li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li></ul></li><li><p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p></li><li><p>区别四：</p><ul><li>块级：<code>display:block</code>;</li><li>行内：<code>display:inline</code>;</li></ul></li></ul></li><li><p>替换元素有如下：（和<code>img</code>一样的设置方法）</p><ul><li><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></li><li><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</li></ul></li></ul></li><li><p>可以通过修改<code>display</code>属性来切换块级元素和行内元素</p></li></ul><hr><h4 id="第十五章-定位"><a href="#第十五章-定位" class="headerlink" title="第十五章 定位"></a>第十五章 定位</h4><hr><ul><li><p><code>static</code>静态定位（不对它的位置进行改变，在哪里就在那里）</p><ul><li> 默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code> bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li></ul></li><li><p><code>fixed</code>固定定位（参照物–浏览器窗口）—做 弹窗广告用到</p><ul><li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot; </code>以及 <code>&quot;bottom&quot; </code>属性进行规定。 </li></ul></li><li><p><code>relative</code>（相对定位 ）（参照物以他本身）</p><ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li></ul></li><li><p><code>absolute</code>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</p><ul><li>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</li><li>元素的位置通过 “<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</li></ul></li><li><p>z-index</p><ul><li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li><li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li></ul></li><li><p>一切皆为框</p><ul><li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li><li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li><li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li></ul></li><li><p>相对定位：</p><ul><li>如果对一个元素进行相对定位，它将出现在它所在的位置上。 </li><li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li><li><code>.adv_relative &#123;  position: relative;  left: 30px;  top: 20px; &#125;</code></li></ul></li><li><p>绝对定位：</p><ul><li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute &#123;  position: absolute;  left: 30px;  top: 20px; &#125;</code></li></ul></li></ul><hr><p><img src="./H4C2/danci.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><img src="./H4C2/position.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><hr><h4 id="第十六章-框架"><a href="#第十六章-框架" class="headerlink" title="第十六章 框架"></a>第十六章 框架</h4><hr><ul><li><p><code>frameset</code>框架：</p><ul><li><code>&lt;frameset&gt; </code> —-  用来定义一个框架；双标签<br>不能和  <code>&lt;body&gt;</code>  一起使用</li></ul></li><li><p><code>rows</code>、<code>cols</code>属性</p><ul><li><code>rows </code> 定义行表示框架有多少行（取值 <code>px </code>/<code>%</code>/ <code>*</code> ）</li><li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>% </code>/ <code>*</code> ）</li></ul></li><li><p>frame子框架</p><ul><li><p>&lt;<code>frame</code>&gt;  —-  表示框架中的某一个部分；单标签，要跟结束标志</p><ul><li><code>src</code> 显示的网页的路径</li><li><code>name</code> 框架名</li><li><code>frameborder</code>  边框线（取值 0 / 1）</li></ul></li><li><p>&lt;<code>noframes</code>&gt;属性</p></li><li><p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">frame</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">“”</span>  /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">frame</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">“”</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">frame</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">“”</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">noframes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">noframes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;iframe&gt;</code>内联框架<ul><li><code>iframe </code>元素会创建包含另外一个文档的内联框架（即行内框架）</li><li>允许和 <code>body</code> 一起使用</li><li><code>width</code> 宽（取值 px / %）</li><li><code>height</code> 高（取值 px / %）</li><li><code>name</code> 框架名</li><li><code>frameborder </code> 边框线（取值 0 / 1）</li><li><code>src</code> 显示的网页的路径</li></ul></li></ul><hr><h4 id="第十七章-css高级属性"><a href="#第十七章-css高级属性" class="headerlink" title="第十七章 css高级属性"></a>第十七章 css高级属性</h4><hr><ul><li><code>opacity</code>透明属性<ul><li><code>opacity</code><ul><li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li><li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li><li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li><li>所以写透明属性时，一般写法是</li></ul></li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"> &#123;<br>    <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.5</span>;<br>   <span class="hljs-attribute">filter</span>:alpha(opacity：<span class="hljs-number">50</span>);<span class="hljs-comment">/*0-100*/</span><br>   -moz-<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.5</span>;<span class="hljs-comment">/*取值0-1*/</span>--&gt;针对早起版本的火狐兼容问题的解决<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>border-radius</code>圆角边框属性</p><ul><li>向 <code>div</code> 元素添加圆角边框<ul><li><code>border-radius:10px</code>;</li></ul></li></ul></li><li><p><code>box-shadow</code>阴影属性</p><ul><li><p><code>box-shadow </code>属性向框添加阴影效果,后面跟4个参数。</p></li><li><p><code>box-shadow:0px   0px   10px   #000;</code></p></li></ul></li><li><p><code>&lt;embed&gt;</code>属性</p><ul><li><p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p></li><li><p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p></li><li><p>格式<code>.mid </code> <code>.wav</code> <code>.mp3</code>等</p></li></ul></li></ul><hr><hr><p><img src="./H4C2/overflow.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><hr><ul><li><a href="https://yunpan.cn/cM9va2bHD4wwu">原文件下载地址</a>   访问密码 342a</li></ul><hr><p><img src="./H4C2/csstixi.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><hr><ul><li><code>css</code>常见简写</li></ul><p><img src="./H4C2/sucha.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css简写速查"></p><hr><h3 id="第三部分-附录"><a href="#第三部分-附录" class="headerlink" title="第三部分 附录"></a>第三部分 附录</h3><hr><h4 id="附录一-CSS书写规范"><a href="#附录一-CSS书写规范" class="headerlink" title="附录一 CSS书写规范"></a>附录一 CSS书写规范</h4><blockquote><p>为了欺骗W3C的验证工具,可将代码分为两个文件，一个是针对所有浏览器,一个只针对IE。即将所有符合W3C的代码写到一个文件中,而一些IE中必须而又不能通过W3C验证的代码（如:cursor:hand;）放到另一个文件中，再用下面的方法导入</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 放置所有浏览器样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只放置IE必须，而不能通过w3c的--&gt;</span><br><span class="hljs-comment">&lt;!--[if IE]</span><br><span class="hljs-comment">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span><br><span class="hljs-comment">&lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><p>CSS样式新建或修改尽量遵循以下原则</p><p>根据新建样式的适用范围分为三级：全站级、产品级、页面级。 尽量通过继承和层叠重用已有样式。 不要轻易改动全站级CSS。改动后，要经过全面测试。</p><hr><ul><li><p>属性显示顺序（规范写法）</p><ul><li>显示属性</li><li>元素位置</li><li>元素属性</li><li>元素内容属性</li></ul></li><li><p>CSS书写顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CSS">  <span class="hljs-selector-class">.header</span> &#123;<br><span class="hljs-comment">/* 显示属性 */</span><br>    display || visibility<br>    <span class="hljs-selector-tag">list-style</span><br>    position top || right || bottom || left<br>    <span class="hljs-selector-tag">z-index</span><br>    <span class="hljs-selector-tag">clear</span><br>    <span class="hljs-selector-tag">float</span><br><span class="hljs-comment">/* 自身属性 */</span><br>    width max-width || min-width<br>    height max-height || min-height<br>    overflow || clip<br>    <span class="hljs-selector-tag">margin</span><br>    <span class="hljs-selector-tag">padding</span><br>    <span class="hljs-selector-tag">outline</span><br>    <span class="hljs-selector-tag">border</span><br>    <span class="hljs-selector-tag">background</span><br><span class="hljs-comment">/* 文本属性 */</span><br>    <span class="hljs-selector-tag">color</span><br>    <span class="hljs-selector-tag">font</span><br>    <span class="hljs-selector-tag">text-overflow</span><br>    <span class="hljs-selector-tag">text-align</span><br>    <span class="hljs-selector-tag">text-indent</span><br>    <span class="hljs-selector-tag">line-height</span><br>    <span class="hljs-selector-tag">white-space</span><br>    <span class="hljs-selector-tag">vertical-align</span><br>    <span class="hljs-selector-tag">cursor</span><br>    <span class="hljs-selector-tag">content</span><br>  &#125;;<br></code></pre></td></tr></table></figure></li><li><p>兼容多个浏览器时，将标准属性写在底部</p></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">-moz-<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: 15px; <span class="hljs-comment">/* Firefox */</span><br>-webkit-<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: 15px; <span class="hljs-comment">/* Safari和Chrome */</span><br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: 15px; <span class="hljs-comment">/* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */</span>/标准属性<br></code></pre></td></tr></table></figure><ul><li>使用选择器时，命名比较短的词汇或者缩写的不允许直接定义样式</li></ul><p><code>.hd,.bd,.td&#123;&#125;;//如这些命名</code></p><ul><li>可用上级节点进行限定</li></ul><p><code>.recommend-mod .hd</code></p><ul><li>多选择器规则之间换行，即当样式针对多个选择器时每个选择器占一行。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.btn</span>,<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.btn</span>,<br>input[type=&quot;button&quot;] &#123;…&#125;;<br></code></pre></td></tr></table></figure><ul><li>优化CSS选择器</li></ul><p><code>#header a &#123; color: #444; &#125;;/*CSS选择器是从右边到左边进行匹配*/</code></p><p>浏览器将检查整个文档中的所有链接和每个链接的父元素，并遍历文档树去查找ID为header的祖先元素，如果找不到header将追溯到文档的根节点，解决方法如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS">避免使用通配规则和相邻兄弟选择符、子选择符,、后代选择符、属性选择符等选择器<br>不要限定<span class="hljs-selector-tag">id</span>选择符，如<span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#header</span>（提权的除外）<br>不要限定类选择器，如<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.recommend</span>（提权的除外）<br>不要使用 <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> 这样长的选择符<br>避免使用标签子选择符，如<span class="hljs-selector-id">#header</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>使用z-index属性尽量z-index的值不要超过150（通用组的除外），页面中的元素内容的z-index不能超过10（提示框等模块除外但维持在150以下），不允许直接使用（999~9999）之间大值。 尽量避免使用CSS Hack</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">property</span><span class="hljs-selector-pseudo">:value</span>; <span class="hljs-comment">/* 所有浏览器 */</span><br>+<span class="hljs-selector-tag">property</span><span class="hljs-selector-pseudo">:value</span>; <span class="hljs-comment">/* IE7 */</span><br>_<span class="hljs-selector-tag">property</span><span class="hljs-selector-pseudo">:value</span>; <span class="hljs-comment">/* IE6 */</span><br>*<span class="hljs-selector-tag">property</span><span class="hljs-selector-pseudo">:value</span>; <span class="hljs-comment">/* IE6/7 */</span><br><span class="hljs-selector-tag">property</span><span class="hljs-selector-pseudo">:value</span>\9; <span class="hljs-comment">/* IE6/7/8/9，即所有IE浏览器 */</span><br><br>\* html selector &#123; … &#125;; /* IE6 */<br>\*:first-child+html selector &#123; … &#125;; /* IE7 */<br>html&gt;body selector &#123; … &#125;; /* 非IE6 */<br><span class="hljs-keyword">@-moz-document</span> url-prefix() &#123; … &#125;; <span class="hljs-comment">/* firefox */</span><br><span class="hljs-keyword">@media</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio:</span><span class="hljs-number">0</span>) &#123; … &#125;; <span class="hljs-comment">/* saf3+/chrome1+ */</span><br><span class="hljs-keyword">@media</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio:</span><span class="hljs-number">10000</span>),<span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio:</span><span class="hljs-number">0</span>) &#123; … &#125;; <span class="hljs-comment">/* opera */</span><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-device-width:</span> <span class="hljs-number">480px</span>) &#123; … &#125;; <span class="hljs-comment">/* iPhone/mobile webkit */</span><br></code></pre></td></tr></table></figure><p>避免使用低效的选择器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">body &gt; * &#123;…&#125;;<br>ul &gt; li &gt; a &#123;…&#125;;<br>#footer &gt; h3 &#123;…&#125;;<br>ul#top_blue_nav &#123;…&#125;;<br>#searbar span.submit a &#123; … &#125;; /* 反面示例 */<br></code></pre></td></tr></table></figure><p>六个不要三个避免一个使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">不要在标签上直接写样式<br>不要在<span class="hljs-selector-tag">CSS</span>中使用<span class="hljs-selector-tag">expression</span><br>不要在<span class="hljs-selector-tag">CSS</span>中使用<span class="hljs-keyword">@import</span><br>不要在CSS中使用!important<br>不要在CSS中使用“*”选择符<br>不要将CSS样式写为单行<br>避免使用filter<br>避免使用行内（inline）样式<br>避免使用“*”设置&#123;<span class="hljs-selector-tag">margin</span>: 0; <span class="hljs-selector-tag">padding</span>: 0;&#125;<br>使用<span class="hljs-selector-tag">after</span>或<span class="hljs-selector-tag">overflow</span>的方式清浮动<br></code></pre></td></tr></table></figure><p>减少使用影响性能的属性</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-comment">//如这些定位或浮动属性</span><br></code></pre></td></tr></table></figure><p>减少在CSS中使用滤镜表达式和图片repeat,尤其在body当中,渲染性能极差, 如果需要用repeat的话,图片的宽或高不能少于8px</p><hr><h4 id="附录二-DIV命名规范"><a href="#附录二-DIV命名规范" class="headerlink" title="附录二 DIV命名规范"></a>附录二 DIV命名规范</h4><hr><ul><li><p>企业<code>DIV</code>使用频率高的命名方法</p></li><li><p><strong>网页内容类</strong></p><ul><li><p>标题: <code>title</code></p><ul><li>摘要: <code>summary</code></li><li>箭头： <code>arrow</code></li><li>商标： <code>label</code></li><li>网站标志： <code>logo</code></li><li>转角/圆角：<code> corner</code></li><li>横幅广告： <code>banner</code></li><li>子菜单： <code>subMenu</code></li><li>搜索： <code>search</code></li><li>搜索框： <code>searchBox</code></li><li>登录： <code>login</code></li><li>登录条：<code>loginbar</code></li><li>工具条： <code>toolbar</code></li><li>下拉： <code>drop</code></li><li>标签页： <code>tab</code></li><li>当前的： <code>current</code></li><li>列表： <code>list</code></li><li>滚动： <code>scroll</code></li><li>服务： <code>service</code></li><li>提示信息： <code>msg</code></li><li>热点：<code>hot</code></li><li>新闻： <code>news</code></li><li>小技巧： <code>tips</code></li><li>下载： <code>download</code></li><li>栏目标题： <code>title</code></li><li>热点： <code>hot</code></li><li>加入：<code> joinus</code></li><li>注册： <code>regsiter</code></li><li>指南： <code>guide</code></li><li>友情链接： <code>friendlink</code></li><li>状态： <code>status</code></li><li>版权： <code>copyright</code></li><li>按钮： <code>btn</code></li><li>合作伙伴： <code>partner</code></li><li>投票： <code>vote</code></li><li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li></ul><hr></li><li><p>注释的写法: <code>/* Footer */ </code> 内容区<code>/* End Footer */</code></p></li></ul></li><li><p><strong>id的命名:</strong></p><ul><li><p>页面结构</p><ul><li>容器: <code>container</code></li><li>页头：<code>header</code></li><li>内容：<code>content</code>/<code>container</code></li><li>页面主体：<code>main</code></li><li>页尾：<code>footer</code></li><li>导航：<code>nav</code></li><li>侧栏：<code>sidebar</code></li><li>栏目：<code>column</code></li><li>页面外围控制整体布局宽度：<code>wrapper</code></li><li>左右中：<code>left</code> <code>right</code> <code>center</code></li></ul></li></ul><hr><ul><li><p>导航</p><ul><li>导航：<code>nav</code></li><li>主导航：<code>mainbav</code></li><li>子导航：<code>subnav</code></li><li>顶导航：<code>topnav</code></li><li>边导航：<code>sidebar</code></li><li>左导航：<code>leftsidebar</code></li><li>右导航：<code>rightsidebar</code></li><li>菜单：<code>menu</code></li><li>子菜单：<code>submenu</code></li><li>标题: <code>title</code></li><li>摘要: <code>summary</code></li></ul></li></ul><hr><ul><li><p>功能</p><ul><li>标志：<code>logo</code></li><li>广告：<code>banner</code></li><li>登陆：<code>login</code></li><li>登录条：<code>loginbar</code></li><li>注册：<code>regsiter</code></li><li>搜索：<code>search</code></li><li>功能区：<code>shop</code></li><li>标题：<code>title</code></li><li>加入：<code>joinus</code></li><li>状态：<code>status</code></li><li>按钮：<code>btn</code></li><li>滚动：<code>scroll</code></li><li>标签页：<code>tab</code></li><li>文章列表：<code>list</code></li><li>提示信息：<code>msg</code></li><li>当前的:<code> current</code></li><li>小技巧：<code>tips</code></li><li>图标: <code>icon</code></li><li>注释：<code>note</code></li><li>指南：<code>guild</code></li><li>服务：<code>service</code></li><li>热点：<code>hot</code></li><li>新闻：<code>news</code></li><li>下载：<code>download</code></li><li>投票：<code>vote</code></li><li>合作伙伴：<code>partner</code></li><li>友情链接：<code>link</code></li><li>版权：<code>copyright</code></li></ul></li></ul><hr><ul><li><p><strong><code>class</code>的命名:</strong></p></li><li><p>颜色:使用颜色的名称或者16进制代码,如</p><ul><li><code>.red &#123; color: red; &#125;</code></li><li><code>.f60 &#123; color: #f60; &#125;</code></li><li><code>.ff8600 &#123; color: #ff8600; &#125;</code></li></ul></li><li><p>字体大小,直接使用”font+字体大小”作为名称,如</p><ul><li><code>.font12px &#123; font-size: 12px; &#125;</code></li><li><code>.font9px &#123;font-size: 9pt; &#125;</code></li></ul></li><li><p>对齐样式,使用对齐目标的英文名称,如</p><ul><li><code>.left &#123; float:left; &#125;</code></li><li><code>.bottom &#123; float:bottom; &#125;</code></li></ul></li><li><p>标题栏样式,使用”类别+功能”的方式命名,如</p><ul><li><code> .barnews &#123; &#125;</code></li><li><code>.barproduct &#123; &#125;</code></li></ul><hr></li><li><p><strong>注意事项::</strong></p><ul><li>一律小写;</li><li>尽量用英文;</li><li>不加中杠和下划线;</li><li>尽量不缩写，除非一看就明白的单词.</li></ul><hr></li></ul></li><li><p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p><ul><li><p>显示属性</p><ul><li><code>display</code></li><li><code>list-style</code></li><li><code>position</code></li><li><code>float</code></li><li><code>clear</code></li></ul></li><li><p>自身属性</p><ul><li><code> width</code></li><li><code>height</code></li><li><code>margin</code></li><li><code>padding</code></li><li><code>border</code></li><li><code>background</code></li></ul></li><li><p>文本属性</p><ul><li><code>color</code></li><li><code> font</code></li><li><code>text-decoration</code></li><li><code>text-align</code></li><li><code>vertical-align</code></li><li><code>white-space</code></li><li><code>other text</code></li><li><code>content </code>    </li></ul></li></ul></li></ul><hr><h4 id="附录三-CSS精灵"><a href="#附录三-CSS精灵" class="headerlink" title="附录三 CSS精灵"></a>附录三 CSS精灵</h4><hr><ul><li><p><strong>CSS精灵原理以及应用</strong></p><ul><li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。<ul><li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li></ul></li></ul></li><li><p><strong>一个简单的例子</strong>：</p><ul><li>一张图片作出一个按钮的三个状态</li><li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li><li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>:block; <br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>; <br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">65px</span>; <br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">65px</span>; <span class="hljs-comment">/*定义状态*/</span><br>    <span class="hljs-attribute">text-indent</span>:-<span class="hljs-number">2015px</span>; <span class="hljs-comment">/*隐藏文字*/</span><br>    <span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(button.png); <span class="hljs-comment">/*定义背景图片*/</span><br>    <span class="hljs-attribute">background-position</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*定义链接的普通状态，此时图像显示的是顶上的部分*/</span><br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-position</span>:<span class="hljs-number">0</span> -<span class="hljs-number">66px</span>;<br>    <span class="hljs-comment">/*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/</span><br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">background-position</span>:<span class="hljs-number">0</span> -<span class="hljs-number">132px</span>;                      <br>    <span class="hljs-comment">/*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值</p><ul><li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li></ul></li><li><p><strong>优点：</strong></p><ul><li>减少加载网页图片时对服务器的请求次数</li><li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li><li>提高页面的加载速度</li><li><code>sprite </code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li><li>减少鼠标滑过的一些<code>bug</code></li><li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li></ul></li><li><p><strong>不足：</strong></p><ul><li><code>CSS</code>雪碧的最大问题是内存使用</li><li>影响浏览器的缩放功能</li><li>拼图维护比较麻烦</li><li>使<code>CSS</code>的编写变得困难</li><li><code>CSS</code> 雪碧调用的图片不能被打印</li><li>错误得使用 <code>Sprites</code> 影响可访问性</li></ul></li></ul><h4 id="附录四-一些tips解决方案"><a href="#附录四-一些tips解决方案" class="headerlink" title="附录四 一些tips解决方案"></a>附录四 一些tips解决方案</h4><hr><h5 id="页面优化实践"><a href="#页面优化实践" class="headerlink" title="页面优化实践"></a>页面优化实践</h5><hr><ul><li><p>从下面的几个方面可以进行页面的优化：</p><ul><li>减少请求数</li><li>图片合并</li><li><code>CSS </code>文件合并</li><li>减少内联样式</li><li>避免在 <code>CSS </code>中使用 <code>import</code></li><li>减少文件大小</li><li>选择适合的图片格式</li><li>图片压缩</li><li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li><li>文件压缩</li><li>页面性能</li><li>调整文件加载顺序</li><li>减少标签数量</li><li>调整选择器长度</li><li>尽量使用<code> CSS</code> 制作显示表现</li><li>增强代码可读性与可维护性</li><li>规范化</li><li>语义化</li><li>模块化</li></ul></li></ul><h5 id="写DIV-CSS-的一些常识"><a href="#写DIV-CSS-的一些常识" class="headerlink" title="写DIV+CSS 的一些常识"></a>写DIV+CSS 的一些常识</h5><hr><ul><li><p>不要使用过小的图片做背景平铺</p><ul><li>这就是为何很多人都不用 <code>1px</code> 的原因，这才知晓。宽高 <code>1px</code> 的图片平铺出一个宽高 <code>200px</code> 的区域，需要 <code>200200=40, 000</code> 次，占用资源</li></ul></li><li><p>无边框</p><ul><li>推荐的写法是 <code>border:none</code>;，哈哈，我一直在用这个。 <code>border:0;</code> 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li></ul></li><li><p>慎用 通配符</p><ul><li>所谓通配符，就是将<code> CSS</code> 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。</li></ul></li><li><p><code>CSS </code>的十六进制颜色代码缩写</p><ul><li>习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。</li></ul></li><li><p> 样式放头上，脚本放脚下。不内嵌，只外链</p></li><li><p> 坚决不用 <code>CSS </code>表达式</p></li><li><p>使用 引用样式表，而不是通过<code> @import</code> 导入。</p></li><li><p> 一般来说，<code>PNG </code>比 <code>GIF</code> 要小，小得多。再者，<code>GIF</code> 中有多少颜色是被浪费的，很值得优化。</p></li><li><p>千万不要在 <code>HTML </code>中缩放图片，一者不好看，二者占资源。</p></li><li><p>正文字体最好用偶数</p><ul><li><code>12px</code>、<code>14px</code>、<code>16px</code>，效果非常好。特例，<code>15px</code>。</li></ul></li><li><p><code>block</code>、<code>ul</code>、<code>ol </code>等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。</p></li><li><p>段落之间，至少要有一倍行距</p></li><li><p>强行指定某些元素的 <code>line-height</code>，正文 <code>1.6 </code>倍于文字大小，标题<code>1.3 </code>倍。</p></li><li><p>中文标点用全角</p><ul><li>英文夹杂在中文中，左右空格，半角。</li></ul></li><li><p>中文字体的粗体和斜体，远离较好</p></li></ul><h5 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h5><hr><ul><li>雅虎工程师提供的<code>CSS</code>初始化示例代码【仅供参考】<ul><li>可以在<code>html</code>头文件中直接引用，从而避免浏览器的不兼容带来的错误。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">div</span>,<br><span class="hljs-selector-tag">dl</span>,<br><span class="hljs-selector-tag">dt</span>,<br><span class="hljs-selector-tag">dd</span>,<br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span>,<br><span class="hljs-selector-tag">li</span>,<br><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">h3</span>,<br><span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-tag">h5</span>,<br><span class="hljs-selector-tag">h6</span>,<br><span class="hljs-selector-tag">pre</span>,<br><span class="hljs-selector-tag">code</span>,<br><span class="hljs-selector-tag">form</span>,<br><span class="hljs-selector-tag">fieldset</span>,<br><span class="hljs-selector-tag">legend</span>,<br><span class="hljs-selector-tag">input</span>,<br><span class="hljs-selector-tag">button</span>,<br><span class="hljs-selector-tag">textarea</span>,<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">blockquote</span>,<br><span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">td</span> &#123; <br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>; <br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#555</span>; <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>; <br>    <span class="hljs-attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif; <br>&#125;<br><span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">th</span>,<br><span class="hljs-selector-tag">caption</span> &#123; <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span>, <br><span class="hljs-selector-tag">h2</span>, <br><span class="hljs-selector-tag">h3</span>, <br><span class="hljs-selector-tag">h4</span>, <br><span class="hljs-selector-tag">h5</span>, <br><span class="hljs-selector-tag">h6</span> &#123; <br>    <span class="hljs-attribute">font-weight</span>:normal; <br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">100%</span>; <br>&#125;<br><br><span class="hljs-selector-tag">address</span>, <br><span class="hljs-selector-tag">caption</span>,<br><span class="hljs-selector-tag">cite</span>, <br><span class="hljs-selector-tag">code</span>, <br><span class="hljs-selector-tag">dfn</span>, <br><span class="hljs-selector-tag">em</span>, <br><span class="hljs-selector-tag">strong</span>,<br><span class="hljs-selector-tag">th</span>, <br><span class="hljs-selector-tag">var</span> &#123; <br>    <span class="hljs-attribute">font-style</span>:normal; <br>    <span class="hljs-attribute">font-weight</span>:normal;<br>&#125;<br><span class="hljs-selector-tag">a</span> &#123; <br>    <span class="hljs-attribute">color</span>:<span class="hljs-number">#555</span>; <br>    <span class="hljs-attribute">text-decoration</span>:none; <br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <br>    <span class="hljs-attribute">text-decoration</span>:underline; <br>&#125;<br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border</span>:none;<br>&#125;<br><span class="hljs-selector-tag">ol</span>,<span class="hljs-selector-tag">ul</span>,<span class="hljs-selector-tag">li</span> &#123; <br>    <span class="hljs-attribute">list-style</span>:none; <br>&#125;<br><span class="hljs-selector-tag">input</span>, <br><span class="hljs-selector-tag">textarea</span>, <br><span class="hljs-selector-tag">select</span>, <br><span class="hljs-selector-tag">button</span> &#123; <br>    <span class="hljs-attribute">font</span>:<span class="hljs-number">14px</span> Verdana,Helvetica,Arial,sans-serif; <br>&#125;<br><span class="hljs-selector-tag">table</span> &#123; <br>    <span class="hljs-attribute">border-collapse</span>:collapse; <br>&#125;<br><span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">overflow-y</span>: scroll;<br>&#125; <br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;.&quot;</span>; <br>    <span class="hljs-attribute">display</span>: block; <br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>; <br>    <span class="hljs-attribute">clear</span>:both; <br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123; <br>    *zoom:1; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>mobile meta </code>标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”viewport”</span> <span class="hljs-attr">content</span>=<span class="hljs-string">”width</span>=<span class="hljs-string">320,target-densitydpi</span>=<span class="hljs-string">dpi_value,initial-scale</span>=<span class="hljs-string">1,</span> <span class="hljs-attr">user-scalable</span>=<span class="hljs-string">no”/</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>表格不被撑开</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table-layout</span>: <span class="hljs-selector-tag">fixed</span>;<br><span class="hljs-selector-tag">word-break</span>: <span class="hljs-selector-tag">break-all</span>;<br><span class="hljs-selector-tag">border-collapse</span>: <span class="hljs-selector-tag">collapse</span>;<br></code></pre></td></tr></table></figure><ul><li>不设宽高居中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”abc”</span> <span class="hljs-attr">style</span>=<span class="hljs-string">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">”background:#f00;</span> <span class="hljs-attr">display:table-cell</span>; <span class="hljs-attr">vertical-align:middle</span>;”&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”button”</span> <span class="hljs-attr">value</span>=<span class="hljs-string">”item1″</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>透明度的兼容代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">filter:alpha(opacity=50); /*1-100*/<br><span class="hljs-selector-tag">-moz-opacity</span><span class="hljs-selector-pseudo">:0.5</span>; <span class="hljs-comment">/*0-1.0*/</span><br><span class="hljs-selector-tag">-khtml-opacity</span><span class="hljs-selector-pseudo">:0.5</span>; <span class="hljs-comment">/*0-1.0*/</span><br><span class="hljs-selector-tag">opacity</span><span class="hljs-selector-pseudo">:0.5</span>; <span class="hljs-comment">/*0-1.0*/</span><br></code></pre></td></tr></table></figure><ul><li>文字溢出点点省略</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">white-space</span><span class="hljs-selector-pseudo">:nowrap</span>;<br><span class="hljs-selector-tag">text-overflow</span><span class="hljs-selector-pseudo">:ellipsis</span>;<br><span class="hljs-selector-tag">overflow</span><span class="hljs-selector-pseudo">:hidden</span>;<br></code></pre></td></tr></table></figure><ul><li><p>清除浮动的几种方法</p><ul><li><p>方法一：<code>投机取巧法</code> – 不推荐</p><ul><li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li></ul></li><li><p>方法二：<code>overflow + zoom</code>方法  –不推荐<br> <code>.fix&#123;overflow:hidden; zoom:1;&#125;</code></p><ul><li>此方法优点在于代码简洁，涵盖所有浏览器</li></ul></li><li><p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p><ul><li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fix</span>&#123;<span class="hljs-attribute">zoom</span>:<span class="hljs-number">1</span>;&#125;<br><span class="hljs-selector-class">.fix</span><span class="hljs-selector-pseudo">:after</span>&#123;<br>     <span class="hljs-attribute">display</span>:block; <br>     <span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;clear&#x27;</span>; <br>     <span class="hljs-attribute">clear</span>:both;<br>     <span class="hljs-attribute">line-height</span>:<span class="hljs-number">0</span>; <br>     <span class="hljs-attribute">visibility</span>:hidden;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>更多代码片段详情<ul><li><a href="http://www.jianshu.com/p/e878122a92a3">实用的60个CSS代码片段</a></li></ul></li></ul><h5 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h5><hr><ul><li><p>自动继承属性：</p><ul><li><code>color</code></li><li><code>font</code></li><li><code>text-align</code></li><li><code>list-style</code><br>…</li></ul></li><li><p>非继承属性：</p><ul><li><code>background</code></li><li><code>border</code></li><li><code>position</code><br>…</li></ul></li><li><p>具有破坏性的元素：</p><ul><li><code>float</code></li><li><code>display:none;</code></li><li><code>position:absoblute/fixed/sticky;</code></li></ul></li><li><p>具有包裹性的元素：</p><ul><li><p><code>display:inline-block/table-cell</code></p></li><li><p><code>position:absolute/fixed/sticky</code></p></li><li><p><code>overflow:hidden/scroll</code></p></li></ul></li><li><p>消除图片底部间隙的方法</p><ul><li><p>图片块状化-无基线对齐<br><code>img&#123;display:block;&#125;</code></p></li><li><p>图片底线对齐<br><code>img&#123;vertical-align:bottom;&#125;</code></p></li><li><p>行高足够小 - 基线位置上移<br><code>.box&#123;line-height:0;&#125;</code></p></li></ul></li></ul><h5 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h5><hr><ul><li><p>BFC</p><ul><li>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</li></ul><ul><li><p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p></li><li><p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p></li><li><p>扩展阅读</p><ul><li><a href="https://github.com/dwqs/blog/issues/22">CSS中的BFC</a></li></ul></li></ul></li><li><p>优雅降级(<code>graceful degradation</code>)</p><ul><li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li></ul></li><li><p>渐进增强 <code>progressive enhancement</code>：</p><ul><li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li></ul></li><li><p>平稳退化</p><ul><li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li></ul></li></ul><h5 id="方案荟萃扩展阅读"><a href="#方案荟萃扩展阅读" class="headerlink" title="方案荟萃扩展阅读"></a>方案荟萃扩展阅读</h5><hr><ul><li><p><strong>关于布局</strong></p><ul><li><a href="http://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/">垂直居中</a></li><li><a href="http://codepen.io/shshaw/full/gEiDt">css完全居中</a></li><li><a href="http://www.w3cplus.com/collective-5.html">居中之美</a></li><li><a href="http://www.zhihu.com/question/35290742#answer-20340542">网页中的底部foot定位</a></li><li><a href="http://www.webhek.com/css-100-percent-height">页面高度100%</a></li><li><a href="https://github.com/phoetry/textareaAutoHeight">textarea高度自适应</a></li><li><a href="http://dotdotdot.frebsite.nl/">多行溢出省略</a></li><li><a href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/">Retina屏1px线</a></li><li><a href="https://github.com/philipwalton/flexbugs">Flexbugs</a></li></ul></li><li><p><strong>其他</strong></p><ul><li><a href="http://www.stepday.com/topic/?690">IF IE ENDIF条件判断之IE10</a></li><li><a href="http://www.zhihu.com/question/20158063">Chrome 翻译插件</a></li><li><a href="http://blog.netsh.org/posts/website-retina_1779.netsh.html">网页retina优化</a></li><li><a href="http://segmentfault.com/a/1190000002407912">常用meta</a></li><li><a href="http://www.cnblogs.com/mq0036/p/3531848.html">树状菜单</a></li><li><a href="http://www.w3ctrain.com/2015/07/24/comprehensive-guide-when-to-use-em-vs-rem/">em vs rem</a></li><li><a href="https://github.com/classicemi/blog/issues/3#issuecomment-113861251">css vs js</a></li><li><a href="http://www.w3cplus.com/solution/index/index.html">css解决方案（w3cplus）</a></li><li><a href="http://riccardoscalco.github.io/textures/">Textures生成纹理</a></li><li><a href="http://una.im/CSSgram/">CSSgram</a></li><li><a href="http://zmoazeni.github.io/csscss/">Csscss（检查重复声明等）</a></li></ul></li></ul><h4 id="附录五-部分工具资源"><a href="#附录五-部分工具资源" class="headerlink" title="附录五 部分工具资源"></a>附录五 部分工具资源</h4><hr><ul><li><a href="http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/">学会使用Emmet插件快速编码</a></li><li><a href="http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more">Emmet常用快捷键</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md">Sublime专题</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md">Sublime常用插件总结</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md">Front-End -Develop -Tools</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md">ToolsBox-自己整理的一份工具列表</a></li></ul><h4 id="附录六-编码规范"><a href="#附录六-编码规范" class="headerlink" title="附录六 编码规范"></a>附录六 编码规范</h4><hr><ul><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md">编码规范</a></li><li><a href="http://front-end-standards.com/">前端规范</a></li><li><a href="https://github.com/poetries/mywiki/wiki/web-develop-standard">web develop standard</a></li><li><a href="http://codecloud.net/5622.html">Web 前端开发规范文档</a></li><li><a href="http://zhibimo.com/read/Ashu/front-end-style-guide/index.html">前端开发规范手册</a></li></ul><h4 id="附录七-进阶学习"><a href="#附录七-进阶学习" class="headerlink" title="附录七 进阶学习"></a>附录七 进阶学习</h4><hr><ul><li><a href="http://www.jianshu.com/p/1e638b7da640">DOM编程之API学习</a></li><li><a href="http://www.jianshu.com/p/1f2314552e23">JavaScript基础学习</a></li></ul><h4 id="附录八-其他资源"><a href="#附录八-其他资源" class="headerlink" title="附录八 其他资源"></a>附录八 其他资源</h4><hr><ul><li><a href="https://github.com/poetries/mywiki">Github上前端学习资源汇总</a></li><li><a href="https://github.com/poetries/mywiki/tree/master/front-end">WEB 前端开发学习笔记</a></li><li><a href="https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7">前端开发工具箱</a></li><li><a href="https://segmentfault.com/a/1190000006689923">148个资源让你成为CSS专家</a></li><li><a href="http://zh.learnlayout.com/">学习CSS布局-经典必看</a></li></ul><h4 id="附录九-常见问题"><a href="#附录九-常见问题" class="headerlink" title="附录九 常见问题"></a>附录九 常见问题</h4><hr><ul><li><p>前端指路</p><ul><li><a href="http://www.w3cplus.com/css/write-to-front-end-developer-interview.html">写给前端面试者（w3cplus）</a></li><li><a href="http://jiongks.name/blog/how-to-become-a-great-front-end-engineer/">如何成为一名卓越的前端工程师（勾三股四博客）</a></li><li><a href="http://www.epubit.com.cn/article/144">什么是全栈工程师</a></li><li><a href="https://uptodate.frontendrescue.org/zh/">如何跟上前端开发的最新前沿</a></li><li><a href="http://blog.jobbole.com/12749/">浏览器的工作原理</a></li><li><a href="http://www.zhihu.com/question/20269059#answer-19718763">移动前端开发和 Web 前端开发的区别</a></li><li><a href="http://segmentfault.com/q/1010000003723038?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly">大型网站CSS编写与维护</a></li><li><a href="http://segmentfault.com/q/1010000003059724">CSS核心技术关键字</a></li></ul></li><li><p>性能/规范/实践</p><ul><li><a href="http://www.chinaw3c.org/how-to-read-spec-wxx.html">如何阅读W3c规范(王晓轩)</a></li><li><a href="http://www.chinaw3c.org/how-to-read-spec-gb.html">如何阅读W3c规范(高博)</a></li><li><a href="https://developer.yahoo.com/performance/rules.html">雅虎web性能优化军规</a></li><li><a href="http://browserdiet.com/zh/">权威前端性能指南</a></li><li><a href="http://www.html-js.com/article/Front-end-home-best-practice-in-front-of-the-web-high-performance-CSS">高性能css</a></li></ul></li><li><p>一些问答社区</p><ul><li><a href="https://www.quora.com/">quora</a></li><li><a href="http://stackoverflow.com/">stackoverflow</a></li><li><a href="http://www.zhihu.com/">知乎</a></li><li><a href="http://www.html-js.com/qa">前端乱炖问答区</a></li><li><a href="http://segmentfault.com/questions/newest">segmentfault问答区</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一些关于html和css的笔记&lt;/p&gt;
&lt;h3 id=&quot;第一部分-HTML&quot;&gt;&lt;a href=&quot;#第一部分-HTML&quot; class=&quot;headerlink&quot; title=&quot;第一部分 HTML&quot;&gt;&lt;/a&gt;第一部分 HTML&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;第一章-职业规划和前景&quot;&gt;&lt;a href=&quot;#第一章-职业规划和前景&quot; class=&quot;headerlink&quot; title=&quot;第一章 职业规划和前景&quot;&gt;&lt;/a&gt;第一章 职业规划和前景&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;职业方向规划定位：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;前端开发工程师&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;网站架构师&lt;/li&gt;
&lt;li&gt;自己创业&lt;/li&gt;
&lt;li&gt;转岗管理或其他</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhouhanging.github.io/2020/10/28/hello-world/"/>
    <id>https://zhouhanging.github.io/2020/10/28/hello-world/</id>
    <published>2020-10-28T06:41:02.373Z</published>
    <updated>2020-10-28T06:41:02.373Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
